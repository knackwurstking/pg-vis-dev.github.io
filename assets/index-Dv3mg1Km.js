var Wr=Object.defineProperty;var Hr=(r,e,t)=>e in r?Wr(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var v=(r,e,t)=>Hr(r,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const i of n)if(i.type==="childList")for(const a of i.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function t(n){const i={};return n.integrity&&(i.integrity=n.integrity),n.referrerPolicy&&(i.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?i.credentials="include":n.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(n){if(n.ep)return;n.ep=!0;const i=t(n);fetch(n.href,i)}})();class Nr{constructor(){this.listeners={}}addListener(e,t){return this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t),()=>this.removeListener(e,t)}removeListener(e,t){this.listeners[e]&&(this.listeners[e]=this.listeners[e].filter(s=>s!==t))}dispatch(e,t){this.listeners[e]&&this.listeners[e].forEach(s=>s(t))}}class Vr{constructor(e){this.prefix="",this.events=new Nr,this.data={},this.prefix=e}get(e,t){if(!(t!=null&&t.skipStore)){const s=localStorage.getItem(`${this.prefix}${e}`);if(s!==null)return JSON.parse(s)}if(this.data.hasOwnProperty(e))return this.data[e]}set(e,t,s=!1,n){if(s){let i=null;n!=null&&n.skipStore?i=null:i=localStorage.getItem(`${this.prefix}${e}`),i!==null?this.data[e]=JSON.parse(i):this.data.hasOwnProperty(e)||(this.data[e]=t)}else this.data[e]=t;n!=null&&n.skipStore||localStorage.setItem(`${this.prefix}${e}`,JSON.stringify(this.data[e])),this.events.dispatch(e,this.data[e])}update(e,t,s){const n=this.get(e,s);if(n===void 0)throw new Error(`"${e}" not found, use \`set\``);this.set(e,t(n),!1,s)}listen(e,t,s=!1,n){if(s){const i=this.get(e,n);i!==void 0&&setTimeout(()=>t(i))}return this.events.addListener(e,t)}}function Mr(r,e){let t=null;async function s(n){var i,a;if(t!==null&&(((i=t.template)==null?void 0:i.onDestroy)!==void 0&&t.template.onDestroy(),t.onDestroy!==void 0&&t.onDestroy()),t=n,t.title!==void 0){const u=document.querySelector("head > title");u!==null&&(u.innerHTML=t.title)}if((t==null?void 0:t.href)!==void 0){const u=await(await fetch(t.href)).text();r.innerHTML=u,t.scripts!==void 0&&t.scripts.forEach(m=>{const E=document.createElement("script");E.setAttribute("data-template",t.href),E.src=m.src,r.appendChild(E)})}if((t==null?void 0:t.onMount)!==void 0&&t.onMount(),(t==null?void 0:t.template)!==void 0){let u=r;t.template.target!==void 0&&(u=document.querySelector(t.template.target));const m=document.querySelector(t.template.selector);if(m===null)throw`${t.template.selector} not found`;m instanceof HTMLTemplateElement?(u.innerHTML="",u.appendChild(m.content.cloneNode(!0))):u.innerHTML=m.innerHTML,((a=t.template)==null?void 0:a.onMount)!==void 0&&t.template.onMount()}}window.addEventListener("hashchange",()=>{const n=window.location.hash.replace("#","");let i="";for(const a of Object.keys(e))n.startsWith(a)&&a>i&&(i=a);if(!i){const a=e["/"];if(a===void 0){console.warn(`Window location “${n}” is missing in routes, and the fallback route “/“ is also missing.`);return}s(a);return}s(e[i])}),window.dispatchEvent(new Event("hashchange"))}const zr=Object.freeze(Object.defineProperty({__proto__:null,hash:Mr},Symbol.toStringTag,{value:"Module"}));function Jr(r){return Object.entries(r).map(([e,t])=>`${e.replace(/[A-Z]/g,s=>`-${s.toLowerCase()}`)}:${t}`).join(";")+";"}const Qr="modulepreload",Xr=function(r){return"/pg-vis-dev.github.io/"+r},Me={},Yr=function(e,t,s){let n=Promise.resolve();if(t&&t.length>0){document.getElementsByTagName("link");const a=document.querySelector("meta[property=csp-nonce]"),u=(a==null?void 0:a.nonce)||(a==null?void 0:a.getAttribute("nonce"));n=Promise.allSettled(t.map(m=>{if(m=Xr(m),m in Me)return;Me[m]=!0;const E=m.endsWith(".css"),T=E?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${m}"]${T}`))return;const _=document.createElement("link");if(_.rel=E?"stylesheet":Qr,E||(_.as="script"),_.crossOrigin="",_.href=m,u&&_.setAttribute("nonce",u),document.head.appendChild(_),E)return new Promise((w,G)=>{_.addEventListener("load",w),_.addEventListener("error",()=>G(new Error(`Unable to preload CSS for ${m}`)))})}))}function i(a){const u=new Event("vite:preloadError",{cancelable:!0});if(u.payload=a,window.dispatchEvent(u),!u.defaultPrevented)throw a}return n.then(a=>{for(const u of a||[])u.status==="rejected"&&i(u.reason);return e().catch(i)})};function Zr(r={}){const{immediate:e=!1,onNeedRefresh:t,onOfflineReady:s,onRegistered:n,onRegisteredSW:i,onRegisterError:a}=r;let u,m,E;const T=async(w=!0)=>{await m,await(E==null?void 0:E())};async function _(){if("serviceWorker"in navigator){if(u=await Yr(async()=>{const{Workbox:w}=await import("./workbox-window.prod.es5-B9K5rw8f.js");return{Workbox:w}},[]).then(({Workbox:w})=>new w("/pg-vis-dev.github.io/sw.js",{scope:"/pg-vis-dev.github.io/",type:"classic"})).catch(w=>{a==null||a(w)}),!u)return;E=async()=>{await(u==null?void 0:u.messageSkipWaiting())};{let w=!1;const G=()=>{w=!0,u==null||u.addEventListener("controlling",S=>{S.isUpdate&&window.location.reload()}),t==null||t()};u.addEventListener("installed",S=>{typeof S.isUpdate>"u"?typeof S.isExternal<"u"?S.isExternal?G():!w&&(s==null||s()):S.isExternal?window.location.reload():!w&&(s==null||s()):S.isUpdate||s==null||s()}),u.addEventListener("waiting",G),u.addEventListener("externalwaiting",G)}u.register({immediate:e}).then(w=>{i?i("/pg-vis-dev.github.io/sw.js",w):n==null||n(w)}).catch(w=>{a==null||a(w)})}}return m=_(),T}const R=rt();function sr(r){const e=he("alert-lists");return R.get("alert-lists").lists.find(s=>e.listKey(s)===r)||null}function et(r,e){const t=sr(r);return t?t.data[e]:null}function rt(){const r="pg-vis-dev:",e=new Vr(r);return e.set("drawerGroup",{},!0),e.set("alert-lists",{gist:null,lists:[]},!0),e.set("metal-sheets",{gist:null,lists:[]},!0),e.set("vis",{gist:null,lists:[]},!0),e.set("vis-data",{gist:null,lists:[]},!0),e.set("vis-bookmarks",{gist:null,lists:[]},!0),e.set("special",{gist:null,lists:[]},!0),e}class q{key(){return""}listKey(e){return"title"in e?e.title:"unknown"}title(){return""}fileName(e){return`${this.listKey(e)}.json`}zipFileName(){return`${this.title()} - ${new Date().getTime()}.zip`}validate(e){try{return JSON.parse(e)}catch{return null}}sort(e){const t=[],s=e.map(n=>`${this.listKey(n)}`).sort();for(const n of s){const i=e.find(a=>`${this.listKey(a)}`===n);i!==void 0&&t.push(i)}return t}replaceInStore(e,t){const s=this.listKey(e),n=this.listKey(t);if(n!==s){for(const i of R.get(this.key()).lists)if(this.listKey(i)===s)throw new Error(`Liste "${s}" existiert bereits!"`)}R.update(this.key(),i=>{for(let a=0;a<i.lists.length;a++)this.listKey(i.lists[a])===n&&(i.lists[a]=e);return i.lists=this.sort(i.lists),i})}addToStore(e){const t=R.get(this.key());for(const n of e){const i=this.listKey(n);if(t.lists.find(u=>this.listKey(u)===i)!==void 0)throw new Error(`Liste "${i}" existiert bereits!"`)}const s=[...t.lists.filter(n=>e.find(a=>this.listKey(a)===this.listKey(n))===void 0),...e];R.set(this.key(),{...t,lists:this.sort(s)})}}class tt extends q{key(){return"alert-lists"}listKey(e){return e.title}title(){return"Alarm Listen"}fileName(e){return`Alarm Liste - ${super.fileName(e)}`}validate(e){const t=super.validate(e);if(typeof t!="object"||typeof(t==null?void 0:t.title)!="string"||!("data"in t)||!Array.isArray(t.data))return null;for(const s of t.data)if(!("from"in s&&"to"in s&&"alert"in s&&"desc"in s)||typeof s.from!="number"||typeof s.to!="number"||typeof s.alert!="string"||(typeof s.desc=="string"&&(s.desc=s.desc.split(`
`)),!Array.isArray(s.desc))||s.desc.filter(n=>typeof n!="string").length>0)return null;return t}}class st extends q{key(){return"metal-sheets"}listKey(e){return`${e.format} ${e.toolID}`}title(){return"Blech Listen"}fileName(e){return`Blech Liste - ${super.fileName(e)}`}validate(e){const t=super.validate(e);if(typeof t!="object"||typeof t.format!="string"||(t.toolID||(t.toolID=""),typeof t.toolID!="string")||!("data"in t)||typeof t.data!="object"||typeof t.data.press!="number")return null;if(!("table"in t.data))t.data.table={header:[],data:[]};else{if(typeof t.data.table!="object"||!("header"in t.data.table)||!("data"in t.data.table)||!Array.isArray(t.data.table.header)||!Array.isArray(t.data.table.data))return null;for(const s of t.data.table.header)if(typeof s!="string")return null;for(const s of t.data.table.data)for(const n of s)if(typeof n!="string")return null}return t}sort(e){const t=a=>a.data.press>-1?`[P${a.data.press}] ${this.listKey(a)}`:`${this.listKey(a)}`,s=[...e.filter(a=>a.data.press>=0)].map(a=>t(a)).sort(),n=[...e.filter(a=>a.data.press<0)].map(a=>t(a)).sort(),i=[];for(const a of[...s,...n]){const u=e.find(m=>t(m)===a);u!==void 0&&i.push(u)}return i}}class ot extends q{key(){return"special"}listKey(e){return`${e.title}`}title(){return"Special"}fileName(e){return`Special - ${super.fileName(e)}`}validate(e){const t=super.validate(e);if(typeof t!="object"||typeof t.title!="string")return null;switch(t.type){case"flakes":if(nt(t.data))return t;break}return null}}function nt(r){if(!Array.isArray(r))return!1;for(const e of r){if(typeof e!="object"||!["P0","P4","P5"].includes(e.press)||typeof e.compatatore!="number"||typeof e.primary!="object"||typeof e.primary.percent!="number"||typeof e.primary.value!="number"||!Array.isArray(e.secondary))return!1;for(const t of e.secondary)if(!["A","C","E","G","I","K"].includes(t.slot)||typeof t.percent!="number"||typeof t.value!="number")return!1}return!0}class it extends q{key(){return"vis-bookmarks"}listKey(e){return`${e.title}`}title(){return"Vis Bookmarks"}fileName(e){return`Vis Bookmarks - ${super.fileName(e)}`}}class at extends q{key(){return"vis-data"}listKey(e){return`${e.title}`}title(){return"Vis Data"}fileName(e){return`Vis Data - ${super.fileName(e)}`}validate(e){const t=super.validate(e);if(typeof t!="object"||typeof t.title!="string"||!Array.isArray(t.data))return null;for(const s of t.data)if(typeof s.key!="string"&&s.key!==null||typeof s.value!="string"||typeof s.lotto!="string"&&s.lotto!==null||typeof s.format!="string"&&s.format!==null||typeof s.thickness!="string"&&s.thickness!==null||typeof s.stamp!="string"&&s.stamp!==null)return null;return t}}function ct(r){const e=(()=>{const t=new Date,s=(t.getMonth()+1).toString().padStart(2,"0"),n=t.getDate().toString().padStart(2,"0");return{date:t.getTime(),title:`${t.getFullYear()}-${s}-${n}`,data:[]}})();for(let t of r.split(`
`)){if(t=t.trim(),!t)continue;const s={lotto:"",name:"",format:"",stamp:"",thickness:-1},n=t.split("	");if(s.lotto=n[0]||"",s.lotto==="")throw new Error(`product lotto missing in ${t}`);if(s.name=n[1]||"",s.name==="")throw new Error(`product name not found in "${t}"`);if(s.format=n[2]||"",s.format==="")throw new Error(`product format not found in "${t}"`);if(s.format=lt(s.format),s.thickness=parseFloat(n[3]||"-1"),s.thickness===-1)throw new Error(`product thickness not found in "${t}"`);if(s.stamp=n[4]||"",s.stamp==="")throw new Error(`product stamp not found in "${t}"`);e.data.push(s)}return e}function lt(r){var e,t;try{const s=r.split(/[xX]/i);if(s.length>2)return r;const n=((e=s[0].match(/[0-9]+(.*)/i))==null?void 0:e[1])||"",i=((t=s[1].match(/[0-9]+(.*)/i))==null?void 0:t[1])||"",a=parseFloat(s[0]),u=parseFloat(s[1]);r=a>u?`${a}${n}X${u}${i}`:`${u}${n}X${a}${i}`}catch(s){console.warn(`Fix product format "${r}": ${s}`)}return r}class ut extends q{key(){return"vis"}listKey(e){return`${e.title}`}title(){return"Vis"}fileName(e){return`Vis Liste - ${super.fileName(e)}`}validate(e){let t=super.validate(e);if(t===null)return ct(e);if(typeof t!="object"||((typeof t.date!="number"||t.date<=0)&&(t.date=new Date().getTime()),typeof t.title!="string"||!Array.isArray(t.data)))return null;for(const s of t.data)if(typeof s!="object"||!("lotto"in s)||!("name"in s)||!("format"in s)||!("thickness"in s)||!("stamp"in s))return null;return t}}function he(r){switch(r){case"alert-lists":return new tt;case"metal-sheets":return new st;case"vis":return new ut;case"vis-bookmarks":return new it;case"vis-data":return new at;case"special":return new ot;default:throw new Error(`unknown "${r}"`)}}const pt=String.raw,dt=he("alert-lists");function gt(r){const e=document.createElement("li");return e.className="ui-flex justify-between",e.innerHTML=pt`
        <a
            class="ui-flex column align-start justify-center"
            style="width: 100%; height: 100%;"
            href="?listKey=${dt.listKey(r.data)}#alert-lists"
        >
            <span>${r.data.title}</span>
            <span>${r.data.data.length} Einträge</span>
        </a>

        <button variant="ghost" color="destructive"><i class="bi bi-trash"></i></button>
    `,{element:e,destroy(){}}}function or(){const r={};for(const e of location.search.replace(/^\?/g,"").split("&")){const[t,s]=e.split("=");r[decodeURIComponent(t)]=decodeURIComponent(s)}return r}function fe(){return document.querySelector("#routerTarget")}function mt(){return document.querySelector("#appBarButtonOpenDrawer")}function x(){return document.querySelector("#appBarTitle")}function Ee(){return document.querySelector("aside.ui-drawer")}function ht(){return Ee().querySelector("button.gist-ids")}function nr(r){const e=Ee().querySelector(`.group[name="${r}"]`);return{root:e,items:e.querySelector("ul.items")}}function ft(){return document.querySelector("div.ui-drawer-backdrop")}const ir=Ee();function Et(){ir.setAttribute("open","")}function Te(){ir.removeAttribute("open")}const Tt=String.raw;function ar(r){const e=document.createElement("li");e.className="alert-item ui-flex nowrap align-center justify-between",e.style.width="100%",e.style.padding="var(--ui-spacing)",e.style.borderBottom="1px solid var(--ui-border-color)";const t=()=>{location.href=`?listKey=${r.enableRouting.listKey}&index=${r.enableRouting.alertIndex}#alert`};return r.enableRouting&&(e.role="button",e.style.cursor="pointer",e.addEventListener("click",t)),e.innerHTML=Tt`
        <p>${r.alert.alert}</p>
        <p
            style="${Jr({color:"var(--ui-primary)",textWrap:"nowrap",marginLeft:"var(--ui-spacing)"})}"
        >
            ${r.alert.from===r.alert.to?r.alert.from:`${r.alert.from}..${r.alert.to}`}
        </p>
    `,{element:e,destroy(){r.enableRouting&&e.removeEventListener("click",t)}}}const _t=String.raw;function wt(r){const e=document.createElement("div");return e.className="ui-flex column",e.style.padding="var(--ui-spacing)",e.innerHTML=_t`${r.alert.desc.map(t=>`<p>${t}</p>`).join("")}`,{element:e,destroy(){}}}let Q=[],cr="";async function yt(){const r=or(),e=et(r.listKey,parseInt(r.index,10));if(!e)throw`alert not found: listKey=${r.listKey}, index=${r.index}`;const t=x();cr=t.innerText,t.innerText=`${e.from===e.to?`${e.from}`:`${e.from}..${e.to}`}`,vt(e)}async function bt(){Q.forEach(r=>r()),Q=[],x().innerText=cr}function vt(r){const e=fe(),t=e.querySelector(".alert"),s=e.querySelector(".desc");t.innerHTML="",s.innerHTML="";const n=ar({alert:r});t==null||t.appendChild(n.element),Q.push(n.destroy);const i=wt({alert:r});s.appendChild(i.element),Q.push(i.destroy)}let ue=[],lr="";async function kt(){const r=or(),e=sr(r.listKey);if(!e)throw new Error(`alert list not found: listKey=${r.listKey}`);const t=x();lr=t.innerText,t.innerText=e.title,Gt(e.data,r.listKey)}async function Pt(){ue.forEach(r=>r()),ue=[],x().innerText=lr}function Gt(r,e){const t=fe().querySelector(".alerts");for(let s=0;s<r.length;s++){const n=ar({alert:r[s],enableRouting:{alertIndex:s,listKey:e}});ue.push(n.destroy),t.appendChild(n.element)}}function X(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function _e(r,e,t,s){if(typeof t!="function")throw new Error("method for before hook must be a function");return s||(s={}),Array.isArray(e)?e.reverse().reduce((n,i)=>_e.bind(null,r,i,n,s),t)():Promise.resolve().then(()=>r.registry[e]?r.registry[e].reduce((n,i)=>i.hook.bind(null,n,s),t)():t(s))}function St(r,e,t,s){const n=s;r.registry[t]||(r.registry[t]=[]),e==="before"&&(s=(i,a)=>Promise.resolve().then(n.bind(null,a)).then(i.bind(null,a))),e==="after"&&(s=(i,a)=>{let u;return Promise.resolve().then(i.bind(null,a)).then(m=>(u=m,n(u,a))).then(()=>u)}),e==="error"&&(s=(i,a)=>Promise.resolve().then(i.bind(null,a)).catch(u=>n(u,a))),r.registry[t].push({hook:s,orig:n})}function Ot(r,e,t){if(!r.registry[e])return;const s=r.registry[e].map(n=>n.orig).indexOf(t);s!==-1&&r.registry[e].splice(s,1)}const ze=Function.bind,Je=ze.bind(ze);function ur(r,e,t){const s=Je(Ot,null).apply(null,t?[e,t]:[e]);r.api={remove:s},r.remove=s,["before","error","after","wrap"].forEach(n=>{const i=t?[e,n,t]:[e,n];r[n]=r.api[n]=Je(St,null).apply(null,i)})}function Rt(){const r=Symbol("Singular"),e={registry:{}},t=_e.bind(null,e,r);return ur(t,e,r),t}function At(){const r={registry:{}},e=_e.bind(null,r);return ur(e,r),e}const Ft={Singular:Rt,Collection:At};var Dt="0.0.0-development",Ut=`octokit-endpoint.js/${Dt} ${X()}`,Ct={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Ut},mediaType:{format:""}};function Lt(r){return r?Object.keys(r).reduce((e,t)=>(e[t.toLowerCase()]=r[t],e),{}):{}}function $t(r){if(typeof r!="object"||r===null||Object.prototype.toString.call(r)!=="[object Object]")return!1;const e=Object.getPrototypeOf(r);if(e===null)return!0;const t=Object.prototype.hasOwnProperty.call(e,"constructor")&&e.constructor;return typeof t=="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(r)}function pr(r,e){const t=Object.assign({},r);return Object.keys(e).forEach(s=>{$t(e[s])?s in r?t[s]=pr(r[s],e[s]):Object.assign(t,{[s]:e[s]}):Object.assign(t,{[s]:e[s]})}),t}function Qe(r){for(const e in r)r[e]===void 0&&delete r[e];return r}function pe(r,e,t){var n;if(typeof e=="string"){let[i,a]=e.split(" ");t=Object.assign(a?{method:i,url:a}:{url:i},t)}else t=Object.assign({},e);t.headers=Lt(t.headers),Qe(t),Qe(t.headers);const s=pr(r||{},t);return t.url==="/graphql"&&(r&&((n=r.mediaType.previews)!=null&&n.length)&&(s.mediaType.previews=r.mediaType.previews.filter(i=>!s.mediaType.previews.includes(i)).concat(s.mediaType.previews)),s.mediaType.previews=(s.mediaType.previews||[]).map(i=>i.replace(/-preview/,""))),s}function It(r,e){const t=/\?/.test(r)?"&":"?",s=Object.keys(e);return s.length===0?r:r+t+s.map(n=>n==="q"?"q="+e.q.split("+").map(encodeURIComponent).join("+"):`${n}=${encodeURIComponent(e[n])}`).join("&")}var jt=/\{[^}]+\}/g;function qt(r){return r.replace(/^\W+|\W+$/g,"").split(/,/)}function xt(r){const e=r.match(jt);return e?e.map(qt).reduce((t,s)=>t.concat(s),[]):[]}function Xe(r,e){const t={__proto__:null};for(const s of Object.keys(r))e.indexOf(s)===-1&&(t[s]=r[s]);return t}function dr(r){return r.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e}).join("")}function I(r){return encodeURIComponent(r).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function H(r,e,t){return e=r==="+"||r==="#"?dr(e):I(e),t?I(t)+"="+e:e}function $(r){return r!=null}function oe(r){return r===";"||r==="&"||r==="?"}function Bt(r,e,t,s){var n=r[t],i=[];if($(n)&&n!=="")if(typeof n=="string"||typeof n=="number"||typeof n=="boolean")n=n.toString(),s&&s!=="*"&&(n=n.substring(0,parseInt(s,10))),i.push(H(e,n,oe(e)?t:""));else if(s==="*")Array.isArray(n)?n.filter($).forEach(function(a){i.push(H(e,a,oe(e)?t:""))}):Object.keys(n).forEach(function(a){$(n[a])&&i.push(H(e,n[a],a))});else{const a=[];Array.isArray(n)?n.filter($).forEach(function(u){a.push(H(e,u))}):Object.keys(n).forEach(function(u){$(n[u])&&(a.push(I(u)),a.push(H(e,n[u].toString())))}),oe(e)?i.push(I(t)+"="+a.join(",")):a.length!==0&&i.push(a.join(","))}else e===";"?$(n)&&i.push(I(t)):n===""&&(e==="&"||e==="?")?i.push(I(t)+"="):n===""&&i.push("");return i}function Kt(r){return{expand:Wt.bind(null,r)}}function Wt(r,e){var t=["+","#",".","/",";","?","&"];return r=r.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(s,n,i){if(n){let u="";const m=[];if(t.indexOf(n.charAt(0))!==-1&&(u=n.charAt(0),n=n.substr(1)),n.split(/,/g).forEach(function(E){var T=/([^:\*]*)(?::(\d+)|(\*))?/.exec(E);m.push(Bt(e,u,T[1],T[2]||T[3]))}),u&&u!=="+"){var a=",";return u==="?"?a="&":u!=="#"&&(a=u),(m.length!==0?u:"")+m.join(a)}else return m.join(",")}else return dr(i)}),r==="/"?r:r.replace(/\/$/,"")}function gr(r){var T;let e=r.method.toUpperCase(),t=(r.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),s=Object.assign({},r.headers),n,i=Xe(r,["method","baseUrl","url","headers","request","mediaType"]);const a=xt(t);t=Kt(t).expand(i),/^http/.test(t)||(t=r.baseUrl+t);const u=Object.keys(r).filter(_=>a.includes(_)).concat("baseUrl"),m=Xe(i,u);if(!/application\/octet-stream/i.test(s.accept)&&(r.mediaType.format&&(s.accept=s.accept.split(/,/).map(_=>_.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${r.mediaType.format}`)).join(",")),t.endsWith("/graphql")&&(T=r.mediaType.previews)!=null&&T.length)){const _=s.accept.match(/[\w-]+(?=-preview)/g)||[];s.accept=_.concat(r.mediaType.previews).map(w=>{const G=r.mediaType.format?`.${r.mediaType.format}`:"+json";return`application/vnd.github.${w}-preview${G}`}).join(",")}return["GET","HEAD"].includes(e)?t=It(t,m):"data"in m?n=m.data:Object.keys(m).length&&(n=m),!s["content-type"]&&typeof n<"u"&&(s["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(e)&&typeof n>"u"&&(n=""),Object.assign({method:e,url:t,headers:s},typeof n<"u"?{body:n}:null,r.request?{request:r.request}:null)}function Ht(r,e,t){return gr(pe(r,e,t))}function mr(r,e){const t=pe(r,e),s=Ht.bind(null,t);return Object.assign(s,{DEFAULTS:t,defaults:mr.bind(null,t),merge:pe.bind(null,t),parse:gr})}var Nt=mr(null,Ct);class N extends Error{constructor(t,s,n){super(t);v(this,"name");v(this,"status");v(this,"request");v(this,"response");this.name="HttpError",this.status=Number.parseInt(s),Number.isNaN(this.status)&&(this.status=0),"response"in n&&(this.response=n.response);const i=Object.assign({},n.request);n.request.headers.authorization&&(i.headers=Object.assign({},n.request.headers,{authorization:n.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),i.url=i.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=i}}var Vt="0.0.0-development",Mt={headers:{"user-agent":`octokit-request.js/${Vt} ${X()}`}};function zt(r){if(typeof r!="object"||r===null||Object.prototype.toString.call(r)!=="[object Object]")return!1;const e=Object.getPrototypeOf(r);if(e===null)return!0;const t=Object.prototype.hasOwnProperty.call(e,"constructor")&&e.constructor;return typeof t=="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(r)}async function Ye(r){var _,w,G,S,A;const e=((_=r.request)==null?void 0:_.fetch)||globalThis.fetch;if(!e)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const t=((w=r.request)==null?void 0:w.log)||console,s=((G=r.request)==null?void 0:G.parseSuccessResponseBody)!==!1,n=zt(r.body)||Array.isArray(r.body)?JSON.stringify(r.body):r.body,i=Object.fromEntries(Object.entries(r.headers).map(([b,k])=>[b,String(k)]));let a;try{a=await e(r.url,{method:r.method,body:n,redirect:(S=r.request)==null?void 0:S.redirect,headers:i,signal:(A=r.request)==null?void 0:A.signal,...r.body&&{duplex:"half"}})}catch(b){let k="Unknown Error";if(b instanceof Error){if(b.name==="AbortError")throw b.status=500,b;k=b.message,b.name==="TypeError"&&"cause"in b&&(b.cause instanceof Error?k=b.cause.message:typeof b.cause=="string"&&(k=b.cause))}const F=new N(k,500,{request:r});throw F.cause=b,F}const u=a.status,m=a.url,E={};for(const[b,k]of a.headers)E[b]=k;const T={url:m,status:u,headers:E,data:""};if("deprecation"in E){const b=E.link&&E.link.match(/<([^>]+)>; rel="deprecation"/),k=b&&b.pop();t.warn(`[@octokit/request] "${r.method} ${r.url}" is deprecated. It is scheduled to be removed on ${E.sunset}${k?`. See ${k}`:""}`)}if(u===204||u===205)return T;if(r.method==="HEAD"){if(u<400)return T;throw new N(a.statusText,u,{response:T,request:r})}if(u===304)throw T.data=await ne(a),new N("Not modified",u,{response:T,request:r});if(u>=400)throw T.data=await ne(a),new N(Jt(T.data),u,{response:T,request:r});return T.data=s?await ne(a):a.body,T}async function ne(r){const e=r.headers.get("content-type");return/application\/json/.test(e)?r.json().catch(()=>r.text()).catch(()=>""):!e||/^text\/|charset=utf-8$/.test(e)?r.text():r.arrayBuffer()}function Jt(r){if(typeof r=="string")return r;if(r instanceof ArrayBuffer)return"Unknown error";if("message"in r){const e="documentation_url"in r?` - ${r.documentation_url}`:"";return Array.isArray(r.errors)?`${r.message}: ${r.errors.map(t=>JSON.stringify(t)).join(", ")}${e}`:`${r.message}${e}`}return`Unknown error: ${JSON.stringify(r)}`}function de(r,e){const t=r.defaults(e);return Object.assign(function(n,i){const a=t.merge(n,i);if(!a.request||!a.request.hook)return Ye(t.parse(a));const u=(m,E)=>Ye(t.parse(t.merge(m,E)));return Object.assign(u,{endpoint:t,defaults:de.bind(null,t)}),a.request.hook(u,a)},{endpoint:t,defaults:de.bind(null,t)})}var ge=de(Nt,Mt),Qt="0.0.0-development";function Xt(r){return`Request failed due to following response errors:
`+r.errors.map(e=>` - ${e.message}`).join(`
`)}var Yt=class extends Error{constructor(e,t,s){super(Xt(s));v(this,"name","GraphqlResponseError");v(this,"errors");v(this,"data");this.request=e,this.headers=t,this.response=s,this.errors=s.errors,this.data=s.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Zt=["method","baseUrl","url","headers","request","query","mediaType"],es=["query","method","url"],Ze=/\/api\/v3\/?$/;function rs(r,e,t){if(t){if(typeof e=="string"&&"query"in t)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const a in t)if(es.includes(a))return Promise.reject(new Error(`[@octokit/graphql] "${a}" cannot be used as variable name`))}const s=typeof e=="string"?Object.assign({query:e},t):e,n=Object.keys(s).reduce((a,u)=>Zt.includes(u)?(a[u]=s[u],a):(a.variables||(a.variables={}),a.variables[u]=s[u],a),{}),i=s.baseUrl||r.endpoint.DEFAULTS.baseUrl;return Ze.test(i)&&(n.url=i.replace(Ze,"/api/graphql")),r(n).then(a=>{if(a.data.errors){const u={};for(const m of Object.keys(a.headers))u[m]=a.headers[m];throw new Yt(n,u,a.data)}return a.data.data})}function we(r,e){const t=r.defaults(e);return Object.assign((n,i)=>rs(t,n,i),{defaults:we.bind(null,t),endpoint:t.endpoint})}we(ge,{headers:{"user-agent":`octokit-graphql.js/${Qt} ${X()}`},method:"POST",url:"/graphql"});function ts(r){return we(r,{method:"POST",url:"/graphql"})}var ss=/^v1\./,os=/^ghs_/,ns=/^ghu_/;async function is(r){const e=r.split(/\./).length===3,t=ss.test(r)||os.test(r),s=ns.test(r);return{type:"token",token:r,tokenType:e?"app":t?"installation":s?"user-to-server":"oauth"}}function as(r){return r.split(/\./).length===3?`bearer ${r}`:`token ${r}`}async function cs(r,e,t,s){const n=e.endpoint.merge(t,s);return n.headers.authorization=as(r),e(n)}var ls=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof e!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(is.bind(null,e),{hook:cs.bind(null,e)})};const hr="6.1.2",er=()=>{},us=console.warn.bind(console),ps=console.error.bind(console),rr=`octokit-core.js/${hr} ${X()}`;var J;let ds=(J=class{constructor(e={}){v(this,"request");v(this,"graphql");v(this,"log");v(this,"hook");v(this,"auth");const t=new Ft.Collection,s={baseUrl:ge.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};if(s.headers["user-agent"]=e.userAgent?`${e.userAgent} ${rr}`:rr,e.baseUrl&&(s.baseUrl=e.baseUrl),e.previews&&(s.mediaType.previews=e.previews),e.timeZone&&(s.headers["time-zone"]=e.timeZone),this.request=ge.defaults(s),this.graphql=ts(this.request).defaults(s),this.log=Object.assign({debug:er,info:er,warn:us,error:ps},e.log),this.hook=t,e.authStrategy){const{authStrategy:i,...a}=e,u=i(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:a},e.auth));t.wrap("request",u.hook),this.auth=u}else if(!e.auth)this.auth=async()=>({type:"unauthenticated"});else{const i=ls(e.auth);t.wrap("request",i.hook),this.auth=i}const n=this.constructor;for(let i=0;i<n.plugins.length;++i)Object.assign(this,n.plugins[i](this,e))}static defaults(e){return class extends this{constructor(...s){const n=s[0]||{};if(typeof e=="function"){super(e(n));return}super(Object.assign({},e,n,n.userAgent&&e.userAgent?{userAgent:`${n.userAgent} ${e.userAgent}`}:null))}}}static plugin(...e){var n;const t=this.plugins;return n=class extends this{},v(n,"plugins",t.concat(e.filter(i=>!t.includes(i)))),n}},v(J,"VERSION",hr),v(J,"plugins",[]),J);var gs="0.0.0-development";function ms(r){if(!r.data)return{...r,data:[]};if(!("total_count"in r.data&&!("url"in r.data)))return r;const t=r.data.incomplete_results,s=r.data.repository_selection,n=r.data.total_count;delete r.data.incomplete_results,delete r.data.repository_selection,delete r.data.total_count;const i=Object.keys(r.data)[0],a=r.data[i];return r.data=a,typeof t<"u"&&(r.data.incomplete_results=t),typeof s<"u"&&(r.data.repository_selection=s),r.data.total_count=n,r}function ye(r,e,t){const s=typeof e=="function"?e.endpoint(t):r.request.endpoint(e,t),n=typeof e=="function"?e:r.request,i=s.method,a=s.headers;let u=s.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!u)return{done:!0};try{const m=await n({method:i,url:u,headers:a}),E=ms(m);return u=((E.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:E}}catch(m){if(m.status!==409)throw m;return u="",{value:{status:200,headers:{},data:[]}}}}})}}function fr(r,e,t,s){return typeof t=="function"&&(s=t,t=void 0),Er(r,[],ye(r,e,t)[Symbol.asyncIterator](),s)}function Er(r,e,t,s){return t.next().then(n=>{if(n.done)return e;let i=!1;function a(){i=!0}return e=e.concat(s?s(n.value,a):n.value.data),i?e:Er(r,e,t,s)})}Object.assign(fr,{iterator:ye});function Tr(r){return{paginate:Object.assign(fr.bind(null,r),{iterator:ye.bind(null,r)})}}Tr.VERSION=gs;var hs=(r,e)=>`The cursor at "${r.join(",")}" did not change its value "${e}" after a page transition. Please make sure your that your query is set up correctly.`,fs=class extends Error{constructor(e,t){super(hs(e.pathInQuery,t));v(this,"name","MissingCursorChangeError");this.pageInfo=e,this.cursorValue=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Es=class extends Error{constructor(e){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(e,null,2)}`);v(this,"name","MissingPageInfo");this.response=e,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Ts=r=>Object.prototype.toString.call(r)==="[object Object]";function _r(r){const e=wr(r,"pageInfo");if(e.length===0)throw new Es(r);return e}var wr=(r,e,t=[])=>{for(const s of Object.keys(r)){const n=[...t,s],i=r[s];if(Ts(i)){if(i.hasOwnProperty(e))return n;const a=wr(i,e,n);if(a.length>0)return a}}return[]},V=(r,e)=>e.reduce((t,s)=>t[s],r),ie=(r,e,t)=>{const s=e[e.length-1],n=[...e].slice(0,-1),i=V(r,n);typeof t=="function"?i[s]=t(i[s]):i[s]=t},_s=r=>{const e=_r(r);return{pathInQuery:e,pageInfo:V(r,[...e,"pageInfo"])}},yr=r=>r.hasOwnProperty("hasNextPage"),ws=r=>yr(r)?r.endCursor:r.startCursor,ys=r=>yr(r)?r.hasNextPage:r.hasPreviousPage,br=r=>(e,t={})=>{let s=!0,n={...t};return{[Symbol.asyncIterator]:()=>({async next(){if(!s)return{done:!0,value:{}};const i=await r.graphql(e,n),a=_s(i),u=ws(a.pageInfo);if(s=ys(a.pageInfo),s&&u===n.cursor)throw new fs(a,u);return n={...n,cursor:u},{done:!1,value:i}}})}},bs=(r,e)=>{if(Object.keys(r).length===0)return Object.assign(r,e);const t=_r(r),s=[...t,"nodes"],n=V(e,s);n&&ie(r,s,m=>[...m,...n]);const i=[...t,"edges"],a=V(e,i);a&&ie(r,i,m=>[...m,...a]);const u=[...t,"pageInfo"];return ie(r,u,V(e,u)),r},vs=r=>{const e=br(r);return async(t,s={})=>{let n={};for await(const i of e(t,s))n=bs(n,i);return n}};function ks(r){return{graphql:Object.assign(r.graphql,{paginate:Object.assign(vs(r),{iterator:br(r)})})}}const Ps="13.2.6",Gs={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};var Ss=Gs;const C=new Map;for(const[r,e]of Object.entries(Ss))for(const[t,s]of Object.entries(e)){const[n,i,a]=s,[u,m]=n.split(/ /),E=Object.assign({method:u,url:m},i);C.has(r)||C.set(r,new Map),C.get(r).set(t,{scope:r,methodName:t,endpointDefaults:E,decorations:a})}const Os={has({scope:r},e){return C.get(r).has(e)},getOwnPropertyDescriptor(r,e){return{value:this.get(r,e),configurable:!0,writable:!0,enumerable:!0}},defineProperty(r,e,t){return Object.defineProperty(r.cache,e,t),!0},deleteProperty(r,e){return delete r.cache[e],!0},ownKeys({scope:r}){return[...C.get(r).keys()]},set(r,e,t){return r.cache[e]=t},get({octokit:r,scope:e,cache:t},s){if(t[s])return t[s];const n=C.get(e).get(s);if(!n)return;const{endpointDefaults:i,decorations:a}=n;return a?t[s]=As(r,e,s,i,a):t[s]=r.request.defaults(i),t[s]}};function Rs(r){const e={};for(const t of C.keys())e[t]=new Proxy({octokit:r,scope:t,cache:{}},Os);return e}function As(r,e,t,s,n){const i=r.request.defaults(s);function a(...u){let m=i.endpoint.merge(...u);if(n.mapToData)return m=Object.assign({},m,{data:m[n.mapToData],[n.mapToData]:void 0}),i(m);if(n.renamed){const[E,T]=n.renamed;r.log.warn(`octokit.${e}.${t}() has been renamed to octokit.${E}.${T}()`)}if(n.deprecated&&r.log.warn(n.deprecated),n.renamedParameters){const E=i.endpoint.merge(...u);for(const[T,_]of Object.entries(n.renamedParameters))T in E&&(r.log.warn(`"${T}" parameter is deprecated for "octokit.${e}.${t}()". Use "${_}" instead`),_ in E||(E[_]=E[T]),delete E[T]);return i(E)}return i(...u)}return Object.assign(a,i)}function vr(r){return{rest:Rs(r)}}vr.VERSION=Ps;var ae=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Fs(r){return r&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r}var kr={exports:{}};(function(r,e){(function(t,s){r.exports=s()})(ae,function(){var t=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof ae<"u"?ae:typeof self<"u"?self:{};function s(f){return f&&f.default||f}var n=function(f,c,o={}){var l,p,d;for(l in c)d=c[l],o[l]=(p=f[l])!=null?p:d;return o},i=function(f,c,o={}){var l,p;for(l in f)p=f[l],c[l]!==void 0&&(o[l]=p);return o},a={load:n,overwrite:i},u;u=class{constructor(c,o){this.incr=c,this.decr=o,this._first=null,this._last=null,this.length=0}push(c){var o;this.length++,typeof this.incr=="function"&&this.incr(),o={value:c,prev:this._last,next:null},this._last!=null?(this._last.next=o,this._last=o):this._first=this._last=o}shift(){var c;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),c=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,c}first(){if(this._first!=null)return this._first.value}getArray(){var c,o,l;for(c=this._first,l=[];c!=null;)l.push((o=c,c=c.next,o.value));return l}forEachShift(c){var o;for(o=this.shift();o!=null;)c(o),o=this.shift()}debug(){var c,o,l,p,d;for(c=this._first,d=[];c!=null;)d.push((o=c,c=c.next,{value:o.value,prev:(l=o.prev)!=null?l.value:void 0,next:(p=o.next)!=null?p.value:void 0}));return d}};var m=u,E;E=class{constructor(c){if(this.instance=c,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(o,l)=>this._addListener(o,"many",l),this.instance.once=(o,l)=>this._addListener(o,"once",l),this.instance.removeAllListeners=(o=null)=>o!=null?delete this._events[o]:this._events={}}_addListener(c,o,l){var p;return(p=this._events)[c]==null&&(p[c]=[]),this._events[c].push({cb:l,status:o}),this.instance}listenerCount(c){return this._events[c]!=null?this._events[c].length:0}async trigger(c,...o){var l,p;try{return c!=="debug"&&this.trigger("debug",`Event triggered: ${c}`,o),this._events[c]==null?void 0:(this._events[c]=this._events[c].filter(function(d){return d.status!=="none"}),p=this._events[c].map(async d=>{var g,h;if(d.status!=="none"){d.status==="once"&&(d.status="none");try{return h=typeof d.cb=="function"?d.cb(...o):void 0,typeof(h!=null?h.then:void 0)=="function"?await h:h}catch(y){return g=y,this.trigger("error",g),null}}}),(await Promise.all(p)).find(function(d){return d!=null}))}catch(d){return l=d,this.trigger("error",l),null}}};var T=E,_,w,G;_=m,w=T,G=class{constructor(c){this.Events=new w(this),this._length=0,this._lists=(function(){var o,l,p;for(p=[],o=1,l=c;1<=l?o<=l:o>=l;1<=l?++o:--o)p.push(new _(()=>this.incr(),()=>this.decr()));return p}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(c){return this._lists[c.options.priority].push(c)}queued(c){return c!=null?this._lists[c].length:this._length}shiftAll(c){return this._lists.forEach(function(o){return o.forEachShift(c)})}getFirst(c=this._lists){var o,l,p;for(o=0,l=c.length;o<l;o++)if(p=c[o],p.length>0)return p;return[]}shiftLastFrom(c){return this.getFirst(this._lists.slice(c).reverse()).shift()}};var S=G,A;A=class extends Error{};var b=A,k,F,M,B,K;B=10,F=5,K=a,k=b,M=class{constructor(c,o,l,p,d,g,h,y){this.task=c,this.args=o,this.rejectOnDrop=d,this.Events=g,this._states=h,this.Promise=y,this.options=K.load(l,p),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===p.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((P,O)=>{this._resolve=P,this._reject=O}),this.retryCount=0}_sanitizePriority(c){var o;return o=~~c!==c?F:c,o<0?0:o>B-1?B-1:o}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:c,message:o="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(c??new k(o)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(c){var o;if(o=this._states.jobStatus(this.options.id),!(o===c||c==="DONE"&&o===null))throw new k(`Invalid job status ${o}, expected ${c}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(c,o){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:c,blocked:o})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(c,o,l,p){var d,g,h;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),g={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",g);try{if(h=await(c!=null?c.schedule(this.options,this.task,...this.args):this.task(...this.args)),o())return this.doDone(g),await p(this.options,g),this._assertStatus("DONE"),this._resolve(h)}catch(y){return d=y,this._onFailure(d,g,o,l,p)}}doExpire(c,o,l){var p,d;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),d={args:this.args,options:this.options,retryCount:this.retryCount},p=new k(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(p,d,c,o,l)}async _onFailure(c,o,l,p,d){var g,h;if(l())return g=await this.Events.trigger("failed",c,o),g!=null?(h=~~g,this.Events.trigger("retry",`Retrying ${this.options.id} after ${h} ms`,o),this.retryCount++,p(h)):(this.doDone(o),await d(this.options,o),this._assertStatus("DONE"),this._reject(c))}doDone(c){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",c)}};var U=M,L,Y,Z;Z=a,L=b,Y=class{constructor(c,o,l){this.instance=c,this.storeOptions=o,this.clientId=this.instance._randomIndex(),Z.load(l,l,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var c;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(c=this.heartbeat=setInterval(()=>{var o,l,p,d,g;if(d=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&d>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=d,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&d>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:o,reservoirIncreaseMaximum:p,reservoir:g}=this.storeOptions,this._lastReservoirIncrease=d,l=p!=null?Math.min(o,p-g):o,l>0))return this.storeOptions.reservoir+=l,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?c.unref():void 0:clearInterval(this.heartbeat)}async __publish__(c){return await this.yieldLoop(),this.instance.Events.trigger("message",c.toString())}async __disconnect__(c){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(c=0){return new this.Promise(function(o,l){return setTimeout(o,c)})}computePenalty(){var c;return(c=this.storeOptions.penalty)!=null?c:15*this.storeOptions.minTime||5e3}async __updateSettings__(c){return await this.yieldLoop(),Z.overwrite(c,c,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(c){return await this.yieldLoop(),this._nextRequest+this.timeout<c}computeCapacity(){var c,o;return{maxConcurrent:c,reservoir:o}=this.storeOptions,c!=null&&o!=null?Math.min(c-this._running,o):c!=null?c-this._running:o??null}conditionsCheck(c){var o;return o=this.computeCapacity(),o==null||c<=o}async __incrementReservoir__(c){var o;return await this.yieldLoop(),o=this.storeOptions.reservoir+=c,this.instance._drainAll(this.computeCapacity()),o}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(c){return this._unblockTime>=c}check(c,o){return this.conditionsCheck(c)&&this._nextRequest-o<=0}async __check__(c){var o;return await this.yieldLoop(),o=Date.now(),this.check(c,o)}async __register__(c,o,l){var p,d;return await this.yieldLoop(),p=Date.now(),this.conditionsCheck(o)?(this._running+=o,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=o),d=Math.max(this._nextRequest-p,0),this._nextRequest=p+d+this.storeOptions.minTime,{success:!0,wait:d,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(c,o){var l,p,d;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&o>this.storeOptions.maxConcurrent)throw new L(`Impossible to add a job having a weight of ${o} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return p=Date.now(),d=this.storeOptions.highWater!=null&&c===this.storeOptions.highWater&&!this.check(o,p),l=this.strategyIsBlock()&&(d||this.isBlocked(p)),l&&(this._unblockTime=p+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:d,blocked:l,strategy:this.storeOptions.strategy}}async __free__(c,o){return await this.yieldLoop(),this._running-=o,this._done+=o,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var Fr=Y,ve,ke;ve=b,ke=class{constructor(c){this.status=c,this._jobs={},this.counts=this.status.map(function(){return 0})}next(c){var o,l;if(o=this._jobs[c],l=o+1,o!=null&&l<this.status.length)return this.counts[o]--,this.counts[l]++,this._jobs[c]++;if(o!=null)return this.counts[o]--,delete this._jobs[c]}start(c){var o;return o=0,this._jobs[c]=o,this.counts[o]++}remove(c){var o;return o=this._jobs[c],o!=null&&(this.counts[o]--,delete this._jobs[c]),o!=null}jobStatus(c){var o;return(o=this.status[this._jobs[c]])!=null?o:null}statusJobs(c){var o,l,p,d,g;if(c!=null){if(l=this.status.indexOf(c),l<0)throw new ve(`status must be one of ${this.status.join(", ")}`);p=this._jobs,d=[];for(o in p)g=p[o],g===l&&d.push(o);return d}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((c,o,l)=>(c[this.status[l]]=o,c),{})}};var Dr=ke,Pe,Ge;Pe=m,Ge=class{constructor(c,o){this.schedule=this.schedule.bind(this),this.name=c,this.Promise=o,this._running=0,this._queue=new Pe}isEmpty(){return this._queue.length===0}async _tryToRun(){var c,o,l,p,d,g,h;if(this._running<1&&this._queue.length>0)return this._running++,{task:h,args:c,resolve:d,reject:p}=this._queue.shift(),o=await async function(){try{return g=await h(...c),function(){return d(g)}}catch(y){return l=y,function(){return p(l)}}}(),this._running--,this._tryToRun(),o()}schedule(c,...o){var l,p,d;return d=p=null,l=new this.Promise(function(g,h){return d=g,p=h}),this._queue.push({task:c,args:o,resolve:d,reject:p}),this._tryToRun(),l}};var Ur=Ge,Se="2.19.5",Cr={version:Se},Lr=Object.freeze({version:Se,default:Cr}),Oe=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Re=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),$r=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Ae,Fe,De,Ue,Ce,z;z=a,Ae=T,Ue=Oe,De=Re,Ce=$r,Fe=(function(){class f{constructor(o={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=o,z.load(this.limiterOptions,this.defaults,this),this.Events=new Ae(this),this.instances={},this.Bottleneck=Ne,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new Ue(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new De(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(o=""){var l;return(l=this.instances[o])!=null?l:(()=>{var p;return p=this.instances[o]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${o}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",p,o),p})()}async deleteKey(o=""){var l,p;return p=this.instances[o],this.connection&&(l=await this.connection.__runCommand__(["del",...Ce.allKeys(`${this.id}-${o}`)])),p!=null&&(delete this.instances[o],await p.disconnect()),p!=null||l>0}limiters(){var o,l,p,d;l=this.instances,p=[];for(o in l)d=l[o],p.push({key:o,limiter:d});return p}keys(){return Object.keys(this.instances)}async clusterKeys(){var o,l,p,d,g,h,y,P,O;if(this.connection==null)return this.Promise.resolve(this.keys());for(h=[],o=null,O=`b_${this.id}-`.length,l=9;o!==0;)for([P,p]=await this.connection.__runCommand__(["scan",o??0,"match",`b_${this.id}-*_settings`,"count",1e4]),o=~~P,d=0,y=p.length;d<y;d++)g=p[d],h.push(g.slice(O,-l));return h}_startAutoCleanup(){var o;return clearInterval(this.interval),typeof(o=this.interval=setInterval(async()=>{var l,p,d,g,h,y;h=Date.now(),d=this.instances,g=[];for(p in d){y=d[p];try{await y._store.__groupCheck__(h)?g.push(this.deleteKey(p)):g.push(void 0)}catch(P){l=P,g.push(y.Events.trigger("error",l))}}return g},this.timeout/2)).unref=="function"?o.unref():void 0}updateSettings(o={}){if(z.overwrite(o,this.defaults,this),z.overwrite(o,o,this.limiterOptions),o.timeout!=null)return this._startAutoCleanup()}disconnect(o=!0){var l;if(!this.sharedConnection)return(l=this.connection)!=null?l.disconnect(o):void 0}}return f.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},f}).call(t);var Ir=Fe,Le,$e,Ie;Ie=a,$e=T,Le=(function(){class f{constructor(o={}){this.options=o,Ie.load(this.options,this.defaults,this),this.Events=new $e(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((o,l)=>this._resolve=o)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(o){var l;return this._arr.push(o),l=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),l}}return f.prototype.defaults={maxTime:null,maxSize:null,Promise},f}).call(t);var jr=Le,qr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),xr=s(Lr),je,qe,ee,re,xe,te,Be,Ke,We,se,D,He=[].splice;te=10,qe=5,D=a,Be=S,re=U,xe=Fr,Ke=qr,ee=T,We=Dr,se=Ur,je=(function(){class f{constructor(o={},...l){var p,d;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(o,l),D.load(o,this.instanceDefaults,this),this._queues=new Be(te),this._scheduled={},this._states=new We(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new ee(this),this._submitLock=new se("submit",this.Promise),this._registerLock=new se("register",this.Promise),d=D.load(o,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return p=D.load(o,this.redisStoreDefaults,{}),new Ke(this,d,p);if(this.datastore==="local")return p=D.load(o,this.localStoreDefaults,{}),new xe(this,d,p);throw new f.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}).call(this),this._queues.on("leftzero",()=>{var g;return(g=this._store.heartbeat)!=null&&typeof g.ref=="function"?g.ref():void 0}),this._queues.on("zero",()=>{var g;return(g=this._store.heartbeat)!=null&&typeof g.unref=="function"?g.unref():void 0})}_validateOptions(o,l){if(!(o!=null&&typeof o=="object"&&l.length===0))throw new f.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(o){return this._store.__publish__(o)}disconnect(o=!0){return this._store.__disconnect__(o)}chain(o){return this._limiter=o,this}queued(o){return this._queues.queued(o)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(o){return this._states.jobStatus(o)}jobs(o){return this._states.statusJobs(o)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(o=1){return this._store.__check__(o)}_clearGlobalState(o){return this._scheduled[o]!=null?(clearTimeout(this._scheduled[o].expiration),delete this._scheduled[o],!0):!1}async _free(o,l,p,d){var g,h;try{if({running:h}=await this._store.__free__(o,p.weight),this.Events.trigger("debug",`Freed ${p.id}`,d),h===0&&this.empty())return this.Events.trigger("idle")}catch(y){return g=y,this.Events.trigger("error",g)}}_run(o,l,p){var d,g,h;return l.doRun(),d=this._clearGlobalState.bind(this,o),h=this._run.bind(this,o,l),g=this._free.bind(this,o,l),this._scheduled[o]={timeout:setTimeout(()=>l.doExecute(this._limiter,d,h,g),p),expiration:l.options.expiration!=null?setTimeout(function(){return l.doExpire(d,h,g)},p+l.options.expiration):void 0,job:l}}_drainOne(o){return this._registerLock.schedule(()=>{var l,p,d,g,h;return this.queued()===0?this.Promise.resolve(null):(h=this._queues.getFirst(),{options:g,args:l}=d=h.first(),o!=null&&g.weight>o?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${g.id}`,{args:l,options:g}),p=this._randomIndex(),this._store.__register__(p,g.weight,g.expiration).then(({success:y,wait:P,reservoir:O})=>{var W;return this.Events.trigger("debug",`Drained ${g.id}`,{success:y,args:l,options:g}),y?(h.shift(),W=this.empty(),W&&this.Events.trigger("empty"),O===0&&this.Events.trigger("depleted",W),this._run(p,d,P),this.Promise.resolve(g.weight)):this.Promise.resolve(null)})))})}_drainAll(o,l=0){return this._drainOne(o).then(p=>{var d;return p!=null?(d=o!=null?o-p:o,this._drainAll(d,l+p)):this.Promise.resolve(l)}).catch(p=>this.Events.trigger("error",p))}_dropAllQueued(o){return this._queues.shiftAll(function(l){return l.doDrop({message:o})})}stop(o={}){var l,p;return o=D.load(o,this.stopDefaults),p=d=>{var g;return g=()=>{var h;return h=this._states.counts,h[0]+h[1]+h[2]+h[3]===d},new this.Promise((h,y)=>g()?h():this.on("done",()=>{if(g())return this.removeAllListeners("done"),h()}))},l=o.dropWaitingJobs?(this._run=function(d,g){return g.doDrop({message:o.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var d,g,h;g=this._scheduled;for(d in g)h=g[d],this.jobStatus(h.job.options.id)==="RUNNING"&&(clearTimeout(h.timeout),clearTimeout(h.expiration),h.job.doDrop({message:o.dropErrorMessage}));return this._dropAllQueued(o.dropErrorMessage),p(0)}))):this.schedule({priority:te-1,weight:0},()=>p(1)),this._receive=function(d){return d._reject(new f.prototype.BottleneckError(o.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new f.prototype.BottleneckError("stop() has already been called")),l}async _addToQueue(o){var l,p,d,g,h,y,P;({args:l,options:g}=o);try{({reachedHWM:h,blocked:p,strategy:P}=await this._store.__submit__(this.queued(),g.weight))}catch(O){return d=O,this.Events.trigger("debug",`Could not queue ${g.id}`,{args:l,options:g,error:d}),o.doDrop({error:d}),!1}return p?(o.doDrop(),!0):h&&(y=P===f.prototype.strategy.LEAK?this._queues.shiftLastFrom(g.priority):P===f.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(g.priority+1):P===f.prototype.strategy.OVERFLOW?o:void 0,y!=null&&y.doDrop(),y==null||P===f.prototype.strategy.OVERFLOW)?(y==null&&o.doDrop(),h):(o.doQueue(h,p),this._queues.push(o),await this._drainAll(),h)}_receive(o){return this._states.jobStatus(o.options.id)!=null?(o._reject(new f.prototype.BottleneckError(`A job with the same id already exists (id=${o.options.id})`)),!1):(o.doReceive(),this._submitLock.schedule(this._addToQueue,o))}submit(...o){var l,p,d,g,h,y,P;return typeof o[0]=="function"?(h=o,[p,...o]=h,[l]=He.call(o,-1),g=D.load({},this.jobDefaults)):(y=o,[g,p,...o]=y,[l]=He.call(o,-1),g=D.load(g,this.jobDefaults)),P=(...O)=>new this.Promise(function(W,Kr){return p(...O,function(...Ve){return(Ve[0]!=null?Kr:W)(Ve)})}),d=new re(P,o,g,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),d.promise.then(function(O){return typeof l=="function"?l(...O):void 0}).catch(function(O){return Array.isArray(O)?typeof l=="function"?l(...O):void 0:typeof l=="function"?l(O):void 0}),this._receive(d)}schedule(...o){var l,p,d;return typeof o[0]=="function"?([d,...o]=o,p={}):[p,d,...o]=o,l=new re(d,o,p,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(l),l.promise}wrap(o){var l,p;return l=this.schedule.bind(this),p=function(...d){return l(o.bind(this),...d)},p.withOptions=function(d,...g){return l(d,o,...g)},p}async updateSettings(o={}){return await this._store.__updateSettings__(D.overwrite(o,this.storeDefaults)),D.overwrite(o,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(o=0){return this._store.__incrementReservoir__(o)}}return f.default=f,f.Events=ee,f.version=f.prototype.version=xr.version,f.strategy=f.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},f.BottleneckError=f.prototype.BottleneckError=b,f.Group=f.prototype.Group=Ir,f.RedisConnection=f.prototype.RedisConnection=Oe,f.IORedisConnection=f.prototype.IORedisConnection=Re,f.Batcher=f.prototype.Batcher=jr,f.prototype.jobDefaults={priority:qe,weight:1,expiration:null,id:"<no-id>"},f.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:f.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},f.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},f.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},f.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},f.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},f}).call(t);var Ne=je,Br=Ne;return Br})})(kr);var Ds=kr.exports;const Pr=Fs(Ds);var Us="0.0.0-development";async function Gr(r,e,t,s){if(!t.request||!t.request.request)throw t;if(t.status>=400&&!r.doNotRetry.includes(t.status)){const n=s.request.retries!=null?s.request.retries:r.retries,i=Math.pow((s.request.retryCount||0)+1,2);throw e.retry.retryRequest(t,n,i)}throw t}async function Cs(r,e,t,s){const n=new Pr;return n.on("failed",function(i,a){const u=~~i.request.request.retries,m=~~i.request.request.retryAfter;if(s.request.retryCount=a.retryCount+1,u>a.retryCount)return m*r.retryAfterBaseValue}),n.schedule(Ls.bind(null,r,e,t),s)}async function Ls(r,e,t,s){const n=await t(t,s);if(n.data&&n.data.errors&&n.data.errors.length>0&&/Something went wrong while executing your query/.test(n.data.errors[0].message)){const i=new N(n.data.errors[0].message,500,{request:s,response:n});return Gr(r,e,i,s)}return n}function Sr(r,e){const t=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},e.retry);return t.enabled&&(r.hook.error("request",Gr.bind(null,t,r)),r.hook.wrap("request",Cs.bind(null,t,r))),{retry:{retryRequest:(s,n,i)=>(s.request.request=Object.assign({},s.request.request,{retries:n,retryAfter:i}),s)}}}Sr.VERSION=Us;var $s="0.0.0-development",ce=()=>Promise.resolve();function Is(r,e,t){return r.retryLimiter.schedule(js,r,e,t)}async function js(r,e,t){const s=t.method!=="GET"&&t.method!=="HEAD",{pathname:n}=new URL(t.url,"http://github.test"),i=t.method==="GET"&&n.startsWith("/search/"),a=n.startsWith("/graphql"),m=~~e.retryCount>0?{priority:0,weight:0}:{};r.clustering&&(m.expiration=1e3*60),(s||a)&&await r.write.key(r.id).schedule(m,ce),s&&r.triggersNotification(n)&&await r.notifications.key(r.id).schedule(m,ce),i&&await r.search.key(r.id).schedule(m,ce);const E=r.global.key(r.id).schedule(m,e,t);if(a){const T=await E;if(T.data.errors!=null&&T.data.errors.some(_=>_.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:T,data:T.data})}return E}var qs=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function xs(r){const t=`^(?:${r.map(s=>s.split("/").map(n=>n.startsWith("{")?"(?:.+?)":n).join("/")).map(s=>`(?:${s})`).join("|")})[^/]*$`;return new RegExp(t,"i")}var tr=xs(qs),Or=tr.test.bind(tr),j={},Bs=function(r,e){j.global=new r.Group({id:"octokit-global",maxConcurrent:10,...e}),j.search=new r.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...e}),j.write=new r.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...e}),j.notifications=new r.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...e})};function be(r,e){const{enabled:t=!0,Bottleneck:s=Pr,id:n="no-id",timeout:i=1e3*60*2,connection:a}=e.throttle||{};if(!t)return{};const u={timeout:i};typeof a<"u"&&(u.connection=a),j.global==null&&Bs(s,u);const m=Object.assign({clustering:a!=null,triggersNotification:Or,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new s,id:n,...j},e.throttle);if(typeof m.onSecondaryRateLimit!="function"||typeof m.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);const E={},T=new s.Events(E);return E.on("secondary-limit",m.onSecondaryRateLimit),E.on("rate-limit",m.onRateLimit),E.on("error",_=>r.log.warn("Error in throttling-plugin limit handler",_)),m.retryLimiter.on("failed",async function(_,w){const[G,S,A]=w.args,{pathname:b}=new URL(A.url,"http://github.test");if(!(b.startsWith("/graphql")&&_.status!==401||_.status===403||_.status===429))return;const F=~~S.retryCount;S.retryCount=F,A.request.retryCount=F;const{wantRetry:M,retryAfter:B=0}=await async function(){var K;if(/\bsecondary rate\b/i.test(_.message)){const U=Number(_.response.headers["retry-after"])||G.fallbackSecondaryRateRetryAfter;return{wantRetry:await T.trigger("secondary-limit",U,A,r,F),retryAfter:U}}if(_.response.headers!=null&&_.response.headers["x-ratelimit-remaining"]==="0"||(((K=_.response.data)==null?void 0:K.errors)??[]).some(U=>U.type==="RATE_LIMITED")){const U=new Date(~~_.response.headers["x-ratelimit-reset"]*1e3).getTime(),L=Math.max(Math.ceil((U-Date.now())/1e3)+1,0);return{wantRetry:await T.trigger("rate-limit",L,A,r,F),retryAfter:L}}return{}}();if(M)return S.retryCount++,B*G.retryAfterBaseValue}),r.hook.wrap("request",Is.bind(null,m)),{}}be.VERSION=$s;be.triggersNotification=Or;var Ks="0.0.0-development",Rr=ds.plugin(vr,Tr,ks,Sr,be).defaults({userAgent:`octokit.js/${Ks}`,throttle:{onRateLimit:Ws,onSecondaryRateLimit:Hs}});function Ws(r,e,t){if(t.log.warn(`Request quota exhausted for request ${e.method} ${e.url}`),e.request.retryCount===0)return t.log.info(`Retrying after ${r} seconds!`),!0}function Hs(r,e,t){if(t.log.warn(`SecondaryRateLimit detected for request ${e.method} ${e.url}`),e.request.retryCount===0)return t.log.info(`Retrying after ${r} seconds!`),!0}async function Ns(r,e){const t=await Ms(e),s=he(r),n=[];for(const i of Object.values(t.data.files||{})){if(!(i!=null&&i.content))continue;const a=s.validate(i.content);if(a===null)throw console.error(`Invalid data for "${s.title()}":`,i.content),new Error(`ungültige Daten für "${s.title()}"!`);n.push(a)}return{gist:{id:e,revision:await Vs(e)},lists:n}}async function Vs(r){const e=new Rr;e.log.warn=s=>{alert(`Get gist revision failed: ${r}: ${s}`)};const t=await e.request("GET /gists/{gist_id}/commits",{gist_id:r,headers:{"X-GitHub-Api-Version":"2022-11-28"}});if(t.status!==200)throw new Error(`GET ${t.url} ${t.status}`);return t.data.length}async function Ms(r){const e=new Rr;e.log.warn=s=>{alert(`Get gist data failed: ${r}: ${s}`)};const t=await e.request("GET /gists/{gist_id}",{gist_id:r,headers:{"X-GitHub-Api-Version":"2022-11-28"}});if(t.status!==200)throw new Error(`anfrage von "GET /gist/${r}" ist mit Statuscode ${t.status} fehlgeschlagen`);return t}const zs=String.raw;function Js(r){var u,m;const e=document.createElement("li");e.className="gist-item ui-flex-grid-item ui-border",e.style.width="100%",e.innerHTML=zs`
        <div class="ui-flex-grid-row" style="--justify: space-between; --align: center;">
            <h3>${r.title}</h3>
            <div
                class="ui-flex-grid"
                style="--align: flex-end; --gap: 0; --mono: 1; font-size: 0.85rem; width: fit-content;"
            >
                <span>
                    <span>Local Rev.: </span>
                    <span id="gistID_LocalRevision_${r.storeKey}">
                        ${((u=R.get(r.storeKey).gist)==null?void 0:u.revision)||"?"}
                    </span>
                </span>
                <span>
                    <span>Remote Rev.: </span>
                    <span id="gistID_RemoteRevision_${r.storeKey}">?</span>
                </span>
            </div>
        </div>

        <div
            class="gist-id-container ui-flex-grid-row"
            style="--align: flex-end; --justify: space-between; width: 100%;"
        >
            <div class="ui-flex-grid-item">
                <label for="gistID_${r.storeKey}">Gist ID</label>
                <input
                    id="gistID_${r.storeKey}"
                    style="width: 100%"
                    type="text"
                    placeholder="Gist ID von Telegram hier einfügen"
                    value="${((m=R.get(r.storeKey).gist)==null?void 0:m.id)||""}"
                />
            </div>
            <div class="ui-flex-grid-item" style="--flex: 0;">
                <button class="update" variant="ghost" color="primary" icon>
                    <i class="bi bi-cloud-download"></i>
                </button>
            </div>
        </div>
    `;const t=e.querySelector(`#gistID_LocalRevision_${r.storeKey}`),s=e.querySelector(`#gistID_RemoteRevision_${r.storeKey}`),n=e.querySelector(`#gistID_${r.storeKey}`),i=e.querySelector("button.update");n.onchange=async()=>i.click();let a=!1;return i.onclick=async()=>{var _;if(a)return;a=!0,i.classList.add("active");const E=()=>{setTimeout(()=>{a=!1,i.classList.remove("active")})},T=n.value;if(!T)return R.update(r.storeKey,w=>(w.gist=null,w)),E();R.update(r.storeKey,w=>(w.gist={id:T,revision:null},w));try{const w=await Ns(r.storeKey,T);R.set(r.storeKey,w),s.innerText=t.innerText=`${((_=w.gist)==null?void 0:_.revision)||"?"}`}catch(w){alert(`Pull from gist failed for "${r.storeKey}" ("${T}"): ${w}`)}return E()},n.value,{element:e,destroy(){}}}let me=[],Ar="";async function Qs(){const r=x();Ar=r.innerText,r.innerText="Gist IDs",Ys()}async function Xs(){x().innerText=Ar,me.forEach(r=>r()),me=[]}function Ys(){const r=[{title:"Alarm Listen",storeKey:"alert-lists"},{title:"Blech Listen",storeKey:"metal-sheets"},{title:"VIS",storeKey:"vis"},{title:"VIS: Data",storeKey:"vis-data"},{title:"Spezial",storeKey:"special"}],e=document.querySelector(".gist-ids");for(const t of r){const s=Js(t);me.push(s.destroy),e.appendChild(s.element)}}const Zs=Zr({async onNeedRefresh(){confirm("Update available")&&await Zs()}});mt().onclick=()=>Et();ft().onclick=()=>Te();const eo=ht();eo.onclick=()=>{location.hash="",Te()};for(const r of["alert-lists","metal-sheets","vis","vis-bookmarks","vis-data","special"]){const e=nr(r);e.root.onclick=()=>setTimeout(()=>{R.update("drawerGroup",t=>(t[r]={...t[r]||{},open:e.root.open},t))})}let le=[];R.listen("alert-lists",async r=>{le.forEach(t=>t()),le=[];const e=nr("alert-lists");e.items.innerHTML="";for(const t of r.lists){const s=gt({data:t});le.push(s.destroy),e.items.appendChild(s.element)}},!0);zr.hash(fe(),{"/":{title:"VIS | Gist IDs",template:{selector:'template[name="gist-ids"]',onMount(){Qs()},onDestroy(){Xs()}}},"alert-lists":{title:"VIS | Alarm Listen",template:{selector:'template[name="alert-lists"]',onMount(){kt()},onDestroy(){Pt()}}},alert:{title:"VIS | Alarm",template:{selector:'template[name="alert"]',onMount(){yt()},onDestroy(){bt()}}},"metal-sheets":{},vis:{},"vis-bookmarks":{},"vis-data":{},special:{}});window.onhashchange=()=>{Te()};
