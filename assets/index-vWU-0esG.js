var Vt=Object.defineProperty;var zt=(e,t,r)=>t in e?Vt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;var v=(e,t,r)=>zt(e,typeof t!="symbol"?t+"":t,r);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const i of n)if(i.type==="childList")for(const a of i.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function r(n){const i={};return n.integrity&&(i.integrity=n.integrity),n.referrerPolicy&&(i.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?i.credentials="include":n.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(n){if(n.ep)return;n.ep=!0;const i=r(n);fetch(n.href,i)}})();class Jt{constructor(){this.listeners={}}addListener(t,r){return this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push(r),()=>this.removeListener(t,r)}removeListener(t,r){this.listeners[t]&&(this.listeners[t]=this.listeners[t].filter(s=>s!==r))}dispatch(t,r){this.listeners[t]&&this.listeners[t].forEach(s=>s(r))}}class Qt{constructor(t){this.prefix="",this.events=new Jt,this.data={},this.prefix=t}get(t,r){if(!(r!=null&&r.skipStore)){const s=localStorage.getItem(`${this.prefix}${t}`);if(s!==null)return JSON.parse(s)}if(this.data.hasOwnProperty(t))return this.data[t]}set(t,r,s=!1,n){if(s){let i=null;n!=null&&n.skipStore?i=null:i=localStorage.getItem(`${this.prefix}${t}`),i!==null?this.data[t]=JSON.parse(i):this.data.hasOwnProperty(t)||(this.data[t]=r)}else this.data[t]=r;n!=null&&n.skipStore||localStorage.setItem(`${this.prefix}${t}`,JSON.stringify(this.data[t])),this.events.dispatch(t,this.data[t])}update(t,r,s){const n=this.get(t,s);if(n===void 0)throw new Error(`"${t}" not found, use \`set\``);this.set(t,r(n),!1,s)}listen(t,r,s=!1,n){if(s){const i=this.get(t,n);i!==void 0&&setTimeout(()=>r(i))}return this.events.addListener(t,r)}}function Xt(e,t){let r=null;async function s(n){var i,a;if(r!==null&&(((i=r.template)==null?void 0:i.onDestroy)!==void 0&&r.template.onDestroy(),r.onDestroy!==void 0&&r.onDestroy()),r=n,r.title!==void 0){const u=document.querySelector("head > title");u!==null&&(u.innerHTML=r.title)}if((r==null?void 0:r.href)!==void 0){const u=await(await fetch(r.href)).text();e.innerHTML=u,r.scripts!==void 0&&r.scripts.forEach(g=>{const h=document.createElement("script");h.setAttribute("data-template",r.href),h.src=g.src,e.appendChild(h)})}if((r==null?void 0:r.onMount)!==void 0&&r.onMount(),(r==null?void 0:r.template)!==void 0){let u=e;r.template.target!==void 0&&(u=document.querySelector(r.template.target));const g=document.querySelector(r.template.selector);if(g===null)throw`${r.template.selector} not found`;g instanceof HTMLTemplateElement?(u.innerHTML="",u.appendChild(g.content.cloneNode(!0))):u.innerHTML=g.innerHTML,((a=r.template)==null?void 0:a.onMount)!==void 0&&r.template.onMount()}}window.addEventListener("hashchange",()=>{const n=window.location.hash.replace("#","");let i="";for(const a of Object.keys(t))n.startsWith(a)&&a>i&&(i=a);if(!i){const a=t["/"];if(a===void 0){console.warn(`Window location “${n}” is missing in routes, and the fallback route “/“ is also missing.`);return}s(a);return}s(t[i])}),window.dispatchEvent(new Event("hashchange"))}function Yt(e,t){let r;if(e?r=`?${Object.entries(e).map(([s,n])=>`${encodeURIComponent(s)}=${encodeURIComponent(n)}`).join("&")}`:r="",!t&&!r){location.hash="";return}location.hash=`#${encodeURIComponent(t)}`+(r?`&${r}`:"")}function Zt(){const e={};return location.hash.replace(/^#.*\?/,"").split("?").forEach(t=>{t.split("&").forEach(r=>{const[s,n]=r.split("=");e[decodeURIComponent(s)]=decodeURIComponent(n)})}),e}const er=Object.freeze(Object.defineProperty({__proto__:null,getSearchParam:Zt,goTo:Yt,init:Xt},Symbol.toStringTag,{value:"Module"})),x=Object.freeze(Object.defineProperty({__proto__:null,hash:er},Symbol.toStringTag,{value:"Module"}));function tr(e){return Object.entries(e).map(([t,r])=>`${t.replace(/[A-Z]/g,s=>`-${s.toLowerCase()}`)}:${r}`).join(";")+";"}const rr="modulepreload",sr=function(e){return"/pg-vis-dev.github.io/"+e},Je={},or=function(t,r,s){let n=Promise.resolve();if(r&&r.length>0){document.getElementsByTagName("link");const a=document.querySelector("meta[property=csp-nonce]"),u=(a==null?void 0:a.nonce)||(a==null?void 0:a.getAttribute("nonce"));n=Promise.allSettled(r.map(g=>{if(g=sr(g),g in Je)return;Je[g]=!0;const h=g.endsWith(".css"),_=h?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${g}"]${_}`))return;const T=document.createElement("link");if(T.rel=h?"stylesheet":rr,h||(T.as="script"),T.crossOrigin="",T.href=g,u&&T.setAttribute("nonce",u),document.head.appendChild(T),h)return new Promise((y,S)=>{T.addEventListener("load",y),T.addEventListener("error",()=>S(new Error(`Unable to preload CSS for ${g}`)))})}))}function i(a){const u=new Event("vite:preloadError",{cancelable:!0});if(u.payload=a,window.dispatchEvent(u),!u.defaultPrevented)throw a}return n.then(a=>{for(const u of a||[])u.status==="rejected"&&i(u.reason);return t().catch(i)})};function nr(e={}){const{immediate:t=!1,onNeedRefresh:r,onOfflineReady:s,onRegistered:n,onRegisteredSW:i,onRegisterError:a}=e;let u,g,h;const _=async(y=!0)=>{await g,await(h==null?void 0:h())};async function T(){if("serviceWorker"in navigator){if(u=await or(async()=>{const{Workbox:y}=await import("./workbox-window.prod.es5-B9K5rw8f.js");return{Workbox:y}},[]).then(({Workbox:y})=>new y("/pg-vis-dev.github.io/sw.js",{scope:"/pg-vis-dev.github.io/",type:"classic"})).catch(y=>{a==null||a(y)}),!u)return;h=async()=>{await(u==null?void 0:u.messageSkipWaiting())};{let y=!1;const S=()=>{y=!0,u==null||u.addEventListener("controlling",O=>{O.isUpdate&&window.location.reload()}),r==null||r()};u.addEventListener("installed",O=>{typeof O.isUpdate>"u"?typeof O.isExternal<"u"?O.isExternal?S():!y&&(s==null||s()):O.isExternal?window.location.reload():!y&&(s==null||s()):O.isUpdate||s==null||s()}),u.addEventListener("waiting",S),u.addEventListener("externalwaiting",S)}u.register({immediate:t}).then(y=>{i?i("/pg-vis-dev.github.io/sw.js",y):n==null||n(y)}).catch(y=>{a==null||a(y)})}}return g=T(),_}const G=lr();function it(e){const t=K("alert-lists");return G.get("alert-lists").lists.find(s=>t.listKey(s)===e)||null}function ir(e){const t=K("metal-sheets");return G.get("metal-sheets").lists.find(s=>t.listKey(s)===e)||null}function ar(e,t){const r=it(e);return r?r.data[t]:null}function lr(){console.debug("create store");const e="pg-vis-dev:",t=new Qt(e);return t.set("drawerGroup",{},!0),t.set("alert-lists",{gist:null,lists:[]},!0),t.set("metal-sheets",{gist:null,lists:[]},!0),t.set("vis",{gist:null,lists:[]},!0),t.set("vis-data",{gist:null,lists:[]},!0),t.set("vis-bookmarks",{gist:null,lists:[]},!0),t.set("special",{gist:null,lists:[]},!0),t.set("runtime",{lists:{}},!1),t}class B{key(){return""}listKey(t){return"title"in t?t.title:"unknown"}title(){return""}fileName(t){return`${this.listKey(t)}.json`}zipFileName(){return`${this.title()} - ${new Date().getTime()}.zip`}validate(t){try{return JSON.parse(t)}catch{return null}}sort(t){const r=[],s=t.map(n=>`${this.listKey(n)}`).sort();for(const n of s){const i=t.find(a=>`${this.listKey(a)}`===n);i!==void 0&&r.push(i)}return r}replaceInStore(t,r){const s=this.listKey(t),n=this.listKey(r);if(n!==s){for(const i of G.get(this.key()).lists)if(this.listKey(i)===s)throw new Error(`Liste "${s}" existiert bereits!"`)}G.update(this.key(),i=>{for(let a=0;a<i.lists.length;a++)this.listKey(i.lists[a])===n&&(i.lists[a]=t);return i.lists=this.sort(i.lists),i})}addToStore(t){const r=G.get(this.key());for(const n of t){const i=this.listKey(n);if(r.lists.find(u=>this.listKey(u)===i)!==void 0)throw new Error(`Liste "${i}" existiert bereits!"`)}const s=[...r.lists.filter(n=>t.find(a=>this.listKey(a)===this.listKey(n))===void 0),...t];G.set(this.key(),{...r,lists:this.sort(s)})}}class cr extends B{key(){return"alert-lists"}listKey(t){return t.title}title(){return"Alarm Listen"}fileName(t){return`Alarm Liste - ${super.fileName(t)}`}validate(t){const r=super.validate(t);if(typeof r!="object"||typeof(r==null?void 0:r.title)!="string"||!("data"in r)||!Array.isArray(r.data))return null;for(const s of r.data)if(!("from"in s&&"to"in s&&"alert"in s&&"desc"in s)||typeof s.from!="number"||typeof s.to!="number"||typeof s.alert!="string"||(typeof s.desc=="string"&&(s.desc=s.desc.split(`
`)),!Array.isArray(s.desc))||s.desc.filter(n=>typeof n!="string").length>0)return null;return r}}class ur extends B{key(){return"metal-sheets"}listKey(t){return`${t.format} ${t.toolID}`}title(){return"Blech Listen"}fileName(t){return`Blech Liste - ${super.fileName(t)}`}validate(t){const r=super.validate(t);if(typeof r!="object"||typeof r.format!="string"||(r.toolID||(r.toolID=""),typeof r.toolID!="string")||!("data"in r)||typeof r.data!="object"||typeof r.data.press!="number")return null;if(!("table"in r.data))r.data.table={header:[],data:[]};else{if(typeof r.data.table!="object"||!("header"in r.data.table)||!("data"in r.data.table)||!Array.isArray(r.data.table.header)||!Array.isArray(r.data.table.data))return null;for(const s of r.data.table.header)if(typeof s!="string")return null;for(const s of r.data.table.data)for(const n of s)if(typeof n!="string")return null}return r}sort(t){const r=a=>a.data.press>-1?`[P${a.data.press}] ${this.listKey(a)}`:`${this.listKey(a)}`,s=[...t.filter(a=>a.data.press>=0)].map(a=>r(a)).sort(),n=[...t.filter(a=>a.data.press<0)].map(a=>r(a)).sort(),i=[];for(const a of[...s,...n]){const u=t.find(g=>r(g)===a);u!==void 0&&i.push(u)}return i}}class pr extends B{key(){return"special"}listKey(t){return`${t.title}`}title(){return"Special"}fileName(t){return`Special - ${super.fileName(t)}`}validate(t){const r=super.validate(t);if(typeof r!="object"||typeof r.title!="string")return null;switch(r.type){case"flakes":if(dr(r.data))return r;break}return null}}function dr(e){if(!Array.isArray(e))return!1;for(const t of e){if(typeof t!="object"||!["P0","P4","P5"].includes(t.press)||typeof t.compatatore!="number"||typeof t.primary!="object"||typeof t.primary.percent!="number"||typeof t.primary.value!="number"||!Array.isArray(t.secondary))return!1;for(const r of t.secondary)if(!["A","C","E","G","I","K"].includes(r.slot)||typeof r.percent!="number"||typeof r.value!="number")return!1}return!0}class gr extends B{key(){return"vis-bookmarks"}listKey(t){return`${t.title}`}title(){return"Vis Bookmarks"}fileName(t){return`Vis Bookmarks - ${super.fileName(t)}`}}class mr extends B{key(){return"vis-data"}listKey(t){return`${t.title}`}title(){return"Vis Data"}fileName(t){return`Vis Data - ${super.fileName(t)}`}validate(t){const r=super.validate(t);if(typeof r!="object"||typeof r.title!="string"||!Array.isArray(r.data))return null;for(const s of r.data)if(typeof s.key!="string"&&s.key!==null||typeof s.value!="string"||typeof s.lotto!="string"&&s.lotto!==null||typeof s.format!="string"&&s.format!==null||typeof s.thickness!="string"&&s.thickness!==null||typeof s.stamp!="string"&&s.stamp!==null)return null;return r}}function hr(e){const t=(()=>{const r=new Date,s=(r.getMonth()+1).toString().padStart(2,"0"),n=r.getDate().toString().padStart(2,"0");return{date:r.getTime(),title:`${r.getFullYear()}-${s}-${n}`,data:[]}})();for(let r of e.split(`
`)){if(r=r.trim(),!r)continue;const s={lotto:"",name:"",format:"",stamp:"",thickness:-1},n=r.split("	");if(s.lotto=n[0]||"",s.lotto==="")throw new Error(`product lotto missing in ${r}`);if(s.name=n[1]||"",s.name==="")throw new Error(`product name not found in "${r}"`);if(s.format=n[2]||"",s.format==="")throw new Error(`product format not found in "${r}"`);if(s.format=fr(s.format),s.thickness=parseFloat(n[3]||"-1"),s.thickness===-1)throw new Error(`product thickness not found in "${r}"`);if(s.stamp=n[4]||"",s.stamp==="")throw new Error(`product stamp not found in "${r}"`);t.data.push(s)}return t}function fr(e){var t,r;try{const s=e.split(/[xX]/i);if(s.length>2)return e;const n=((t=s[0].match(/[0-9]+(.*)/i))==null?void 0:t[1])||"",i=((r=s[1].match(/[0-9]+(.*)/i))==null?void 0:r[1])||"",a=parseFloat(s[0]),u=parseFloat(s[1]);e=a>u?`${a}${n}X${u}${i}`:`${u}${n}X${a}${i}`}catch(s){console.warn(`Fix product format "${e}": ${s}`)}return e}class Er extends B{key(){return"vis"}listKey(t){return`${t.title}`}title(){return"Vis"}fileName(t){return`Vis Liste - ${super.fileName(t)}`}validate(t){let r=super.validate(t);if(r===null)return hr(t);if(typeof r!="object"||((typeof r.date!="number"||r.date<=0)&&(r.date=new Date().getTime()),typeof r.title!="string"||!Array.isArray(r.data)))return null;for(const s of r.data)if(typeof s!="object"||!("lotto"in s)||!("name"in s)||!("format"in s)||!("thickness"in s)||!("stamp"in s))return null;return r}}function K(e){switch(e){case"alert-lists":return new cr;case"metal-sheets":return new ur;case"vis":return new Er;case"vis-bookmarks":return new gr;case"vis-data":return new mr;case"special":return new pr;default:throw new Error(`unknown "${e}"`)}}const Tr=String.raw,Qe=K("alert-lists");function _r(e){const t=document.createElement("li");return t.className="ui-flex justify-between",Qe.title(),t.innerHTML=Tr`
        <a
            class="ui-flex column align-start justify-center"
            style="width: 100%; height: 100%;"
            href="#alert-lists?listKey=${Qe.listKey(e.data)}"
        >
            <span>${e.data.title}</span>
            <span>${e.data.data.length} Einträge</span>
        </a>

        <button variant="ghost" color="destructive"><i class="bi bi-trash"></i></button>
    `,{element:t,destroy(){}}}const yr=String.raw,wr=K("metal-sheets");function br(e){const t=document.createElement("li");t.className="ui-flex justify-between";const r=e.data.data.press>-1?`[P${e.data.data.press}]`:"";return t.innerHTML=yr`
        <a
            class="ui-flex column align-start justify-center"
            style="width: 100%; height: 100%;"
            href="#metal-sheets?listKey=${wr.listKey(e.data)}"
        >
            <span>${r} ${e.data.format} ${e.data.toolID}</span>
            <span>${e.data.data.table.data.length} Einträge</span>
        </a>

        <button variant="ghost" color="destructive"><i class="bi bi-trash"></i></button>
    `,{element:t,destroy(){}}}function J(){return document.querySelector("#routerTarget")}function vr(){return document.querySelector("#appBarButtonOpenDrawer")}function C(){return document.querySelector("#appBarTitle")}function kr(){return document.querySelector("#appBarButtonListEdit")}function Te(){return document.querySelector("aside.ui-drawer")}function Pr(){return Te().querySelector("button.gist-ids")}function _e(e){const t=Te().querySelector(`.group[name="${e}"]`);return{root:t,items:t.querySelector("ul.items")}}function Gr(){return document.querySelector("div.ui-drawer-backdrop")}function at(){const e=document.querySelector('dialog[name="metal-sheet"]');return{root:e,close:e.querySelector("button.close"),form:e.querySelector("form"),format:e.querySelector("input#metalSheetDialog_Format"),toolID:e.querySelector("input#metalSheetDialog_ToolID"),press:e.querySelector("select#metalSheetDialog_Press"),filters:e.querySelectorAll('.filters input[type="checkbox"]'),reset:e.querySelector('input[type="reset"]')}}const lt=Te();function Sr(){lt.setAttribute("open","")}function ye(){lt.removeAttribute("open")}const Or=String.raw;function ct(e){const t=document.createElement("li");t.className="alert-item ui-flex nowrap align-center justify-between",t.style.width="100%",t.style.padding="var(--ui-spacing)",t.style.borderBottom="1px solid var(--ui-border-color)";const r=()=>{x.hash.goTo({listKey:e.enableRouting.listKey,index:e.enableRouting.alertIndex.toString()},"alert")};return e.enableRouting&&(t.role="button",t.style.cursor="pointer",t.addEventListener("click",r)),t.innerHTML=Or`
        <p>${e.alert.alert}</p>
        <p
            style="${tr({color:"var(--ui-primary)",textWrap:"nowrap",marginLeft:"var(--ui-spacing)"})}"
        >
            ${e.alert.from===e.alert.to?e.alert.from:`${e.alert.from}..${e.alert.to}`}
        </p>
    `,{element:t,destroy(){e.enableRouting&&t.removeEventListener("click",r)}}}const Rr=String.raw;function Ar(e){const t=document.createElement("div");return t.className="ui-flex column",t.style.padding="var(--ui-spacing)",t.innerHTML=Rr`${e.alert.desc.map(r=>`<p>${r}</p>`).join("")}`,{element:t,destroy(){}}}let Z=[],ut="";async function Fr(){const e=x.hash.getSearchParam(),t=ar(e.listKey,parseInt(e.index,10));if(!t)throw`alert not found: listKey=${e.listKey}, index=${e.index}`;const r=C();ut=r.innerText,r.innerText=`${t.from===t.to?`${t.from}`:`${t.from}..${t.to}`}`,Ur(t)}async function Dr(){Z.forEach(e=>e()),Z=[],C().innerText=ut}function Ur(e){const t=J(),r=t.querySelector(".alert"),s=t.querySelector(".desc");r.innerHTML="",s.innerHTML="";const n=ct({alert:e});r==null||r.appendChild(n.element),Z.push(n.destroy);const i=Ar({alert:e});s.appendChild(i.element),Z.push(i.destroy)}function Cr(e){const t=e.split(" ").filter(r=>r!=="");try{return new RegExp("(?=.*"+t.join(")(?=.*")+")","i")}catch{return new RegExp("(?=.*"+t.map(r=>r.replace(/[()]/g,"\\$&")).join(")(?=.*")+")","i")}}let de=[],pt="";async function Lr(){const e=x.hash.getSearchParam(),t=it(e.listKey);if(!t)throw new Error(`alert list not found: listKey=${e.listKey}`);const r=C();pt=r.innerText,r.innerText=t.title,Ir(t.data,e.listKey)}async function $r(){de.forEach(e=>e()),de=[],C().innerText=pt}function Ir(e,t){const r=J().querySelector('.search-bar input[type="search"]'),s=J().querySelector(".alerts");e.forEach((n,i)=>{setTimeout(()=>{const a=ct({alert:n,enableRouting:{alertIndex:i,listKey:t}});de.push(a.destroy),s.appendChild(a.element)})}),r.oninput=()=>{const n=Cr(r.value);for(const i of[...s.children])i.textContent!==null&&(i.textContent.match(n)?i.style.display="flex":i.style.display="none")}}function ee(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function we(e,t,r,s){if(typeof r!="function")throw new Error("method for before hook must be a function");return s||(s={}),Array.isArray(t)?t.reverse().reduce((n,i)=>we.bind(null,e,i,n,s),r)():Promise.resolve().then(()=>e.registry[t]?e.registry[t].reduce((n,i)=>i.hook.bind(null,n,s),r)():r(s))}function jr(e,t,r,s){const n=s;e.registry[r]||(e.registry[r]=[]),t==="before"&&(s=(i,a)=>Promise.resolve().then(n.bind(null,a)).then(i.bind(null,a))),t==="after"&&(s=(i,a)=>{let u;return Promise.resolve().then(i.bind(null,a)).then(g=>(u=g,n(u,a))).then(()=>u)}),t==="error"&&(s=(i,a)=>Promise.resolve().then(i.bind(null,a)).catch(u=>n(u,a))),e.registry[r].push({hook:s,orig:n})}function qr(e,t,r){if(!e.registry[t])return;const s=e.registry[t].map(n=>n.orig).indexOf(r);s!==-1&&e.registry[t].splice(s,1)}const Xe=Function.bind,Ye=Xe.bind(Xe);function dt(e,t,r){const s=Ye(qr,null).apply(null,r?[t,r]:[t]);e.api={remove:s},e.remove=s,["before","error","after","wrap"].forEach(n=>{const i=r?[t,n,r]:[t,n];e[n]=e.api[n]=Ye(jr,null).apply(null,i)})}function xr(){const e=Symbol("Singular"),t={registry:{}},r=we.bind(null,t,e);return dt(r,t,e),r}function Br(){const e={registry:{}},t=we.bind(null,e);return dt(t,e),t}const Kr={Singular:xr,Collection:Br};var Hr="0.0.0-development",Mr=`octokit-endpoint.js/${Hr} ${ee()}`,Wr={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Mr},mediaType:{format:""}};function Nr(e){return e?Object.keys(e).reduce((t,r)=>(t[r.toLowerCase()]=e[r],t),{}):{}}function Vr(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const t=Object.getPrototypeOf(e);if(t===null)return!0;const r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof r=="function"&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}function gt(e,t){const r=Object.assign({},e);return Object.keys(t).forEach(s=>{Vr(t[s])?s in e?r[s]=gt(e[s],t[s]):Object.assign(r,{[s]:t[s]}):Object.assign(r,{[s]:t[s]})}),r}function Ze(e){for(const t in e)e[t]===void 0&&delete e[t];return e}function ge(e,t,r){var n;if(typeof t=="string"){let[i,a]=t.split(" ");r=Object.assign(a?{method:i,url:a}:{url:i},r)}else r=Object.assign({},t);r.headers=Nr(r.headers),Ze(r),Ze(r.headers);const s=gt(e||{},r);return r.url==="/graphql"&&(e&&((n=e.mediaType.previews)!=null&&n.length)&&(s.mediaType.previews=e.mediaType.previews.filter(i=>!s.mediaType.previews.includes(i)).concat(s.mediaType.previews)),s.mediaType.previews=(s.mediaType.previews||[]).map(i=>i.replace(/-preview/,""))),s}function zr(e,t){const r=/\?/.test(e)?"&":"?",s=Object.keys(t);return s.length===0?e:e+r+s.map(n=>n==="q"?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${n}=${encodeURIComponent(t[n])}`).join("&")}var Jr=/\{[^}]+\}/g;function Qr(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function Xr(e){const t=e.match(Jr);return t?t.map(Qr).reduce((r,s)=>r.concat(s),[]):[]}function et(e,t){const r={__proto__:null};for(const s of Object.keys(e))t.indexOf(s)===-1&&(r[s]=e[s]);return r}function mt(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(t){return/%[0-9A-Fa-f]/.test(t)||(t=encodeURI(t).replace(/%5B/g,"[").replace(/%5D/g,"]")),t}).join("")}function j(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function N(e,t,r){return t=e==="+"||e==="#"?mt(t):j(t),r?j(r)+"="+t:t}function I(e){return e!=null}function ae(e){return e===";"||e==="&"||e==="?"}function Yr(e,t,r,s){var n=e[r],i=[];if(I(n)&&n!=="")if(typeof n=="string"||typeof n=="number"||typeof n=="boolean")n=n.toString(),s&&s!=="*"&&(n=n.substring(0,parseInt(s,10))),i.push(N(t,n,ae(t)?r:""));else if(s==="*")Array.isArray(n)?n.filter(I).forEach(function(a){i.push(N(t,a,ae(t)?r:""))}):Object.keys(n).forEach(function(a){I(n[a])&&i.push(N(t,n[a],a))});else{const a=[];Array.isArray(n)?n.filter(I).forEach(function(u){a.push(N(t,u))}):Object.keys(n).forEach(function(u){I(n[u])&&(a.push(j(u)),a.push(N(t,n[u].toString())))}),ae(t)?i.push(j(r)+"="+a.join(",")):a.length!==0&&i.push(a.join(","))}else t===";"?I(n)&&i.push(j(r)):n===""&&(t==="&"||t==="?")?i.push(j(r)+"="):n===""&&i.push("");return i}function Zr(e){return{expand:es.bind(null,e)}}function es(e,t){var r=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(s,n,i){if(n){let u="";const g=[];if(r.indexOf(n.charAt(0))!==-1&&(u=n.charAt(0),n=n.substr(1)),n.split(/,/g).forEach(function(h){var _=/([^:\*]*)(?::(\d+)|(\*))?/.exec(h);g.push(Yr(t,u,_[1],_[2]||_[3]))}),u&&u!=="+"){var a=",";return u==="?"?a="&":u!=="#"&&(a=u),(g.length!==0?u:"")+g.join(a)}else return g.join(",")}else return mt(i)}),e==="/"?e:e.replace(/\/$/,"")}function ht(e){var _;let t=e.method.toUpperCase(),r=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),s=Object.assign({},e.headers),n,i=et(e,["method","baseUrl","url","headers","request","mediaType"]);const a=Xr(r);r=Zr(r).expand(i),/^http/.test(r)||(r=e.baseUrl+r);const u=Object.keys(e).filter(T=>a.includes(T)).concat("baseUrl"),g=et(i,u);if(!/application\/octet-stream/i.test(s.accept)&&(e.mediaType.format&&(s.accept=s.accept.split(/,/).map(T=>T.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),r.endsWith("/graphql")&&(_=e.mediaType.previews)!=null&&_.length)){const T=s.accept.match(/[\w-]+(?=-preview)/g)||[];s.accept=T.concat(e.mediaType.previews).map(y=>{const S=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${y}-preview${S}`}).join(",")}return["GET","HEAD"].includes(t)?r=zr(r,g):"data"in g?n=g.data:Object.keys(g).length&&(n=g),!s["content-type"]&&typeof n<"u"&&(s["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&typeof n>"u"&&(n=""),Object.assign({method:t,url:r,headers:s},typeof n<"u"?{body:n}:null,e.request?{request:e.request}:null)}function ts(e,t,r){return ht(ge(e,t,r))}function ft(e,t){const r=ge(e,t),s=ts.bind(null,r);return Object.assign(s,{DEFAULTS:r,defaults:ft.bind(null,r),merge:ge.bind(null,r),parse:ht})}var rs=ft(null,Wr);class V extends Error{constructor(r,s,n){super(r);v(this,"name");v(this,"status");v(this,"request");v(this,"response");this.name="HttpError",this.status=Number.parseInt(s),Number.isNaN(this.status)&&(this.status=0),"response"in n&&(this.response=n.response);const i=Object.assign({},n.request);n.request.headers.authorization&&(i.headers=Object.assign({},n.request.headers,{authorization:n.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),i.url=i.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=i}}var ss="0.0.0-development",os={headers:{"user-agent":`octokit-request.js/${ss} ${ee()}`}};function ns(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const t=Object.getPrototypeOf(e);if(t===null)return!0;const r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof r=="function"&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}async function tt(e){var T,y,S,O,A;const t=((T=e.request)==null?void 0:T.fetch)||globalThis.fetch;if(!t)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const r=((y=e.request)==null?void 0:y.log)||console,s=((S=e.request)==null?void 0:S.parseSuccessResponseBody)!==!1,n=ns(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,i=Object.fromEntries(Object.entries(e.headers).map(([b,k])=>[b,String(k)]));let a;try{a=await t(e.url,{method:e.method,body:n,redirect:(O=e.request)==null?void 0:O.redirect,headers:i,signal:(A=e.request)==null?void 0:A.signal,...e.body&&{duplex:"half"}})}catch(b){let k="Unknown Error";if(b instanceof Error){if(b.name==="AbortError")throw b.status=500,b;k=b.message,b.name==="TypeError"&&"cause"in b&&(b.cause instanceof Error?k=b.cause.message:typeof b.cause=="string"&&(k=b.cause))}const F=new V(k,500,{request:e});throw F.cause=b,F}const u=a.status,g=a.url,h={};for(const[b,k]of a.headers)h[b]=k;const _={url:g,status:u,headers:h,data:""};if("deprecation"in h){const b=h.link&&h.link.match(/<([^>]+)>; rel="deprecation"/),k=b&&b.pop();r.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${h.sunset}${k?`. See ${k}`:""}`)}if(u===204||u===205)return _;if(e.method==="HEAD"){if(u<400)return _;throw new V(a.statusText,u,{response:_,request:e})}if(u===304)throw _.data=await le(a),new V("Not modified",u,{response:_,request:e});if(u>=400)throw _.data=await le(a),new V(is(_.data),u,{response:_,request:e});return _.data=s?await le(a):a.body,_}async function le(e){const t=e.headers.get("content-type");return/application\/json/.test(t)?e.json().catch(()=>e.text()).catch(()=>""):!t||/^text\/|charset=utf-8$/.test(t)?e.text():e.arrayBuffer()}function is(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){const t="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(r=>JSON.stringify(r)).join(", ")}${t}`:`${e.message}${t}`}return`Unknown error: ${JSON.stringify(e)}`}function me(e,t){const r=e.defaults(t);return Object.assign(function(n,i){const a=r.merge(n,i);if(!a.request||!a.request.hook)return tt(r.parse(a));const u=(g,h)=>tt(r.parse(r.merge(g,h)));return Object.assign(u,{endpoint:r,defaults:me.bind(null,r)}),a.request.hook(u,a)},{endpoint:r,defaults:me.bind(null,r)})}var he=me(rs,os),as="0.0.0-development";function ls(e){return`Request failed due to following response errors:
`+e.errors.map(t=>` - ${t.message}`).join(`
`)}var cs=class extends Error{constructor(t,r,s){super(ls(s));v(this,"name","GraphqlResponseError");v(this,"errors");v(this,"data");this.request=t,this.headers=r,this.response=s,this.errors=s.errors,this.data=s.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},us=["method","baseUrl","url","headers","request","query","mediaType"],ps=["query","method","url"],rt=/\/api\/v3\/?$/;function ds(e,t,r){if(r){if(typeof t=="string"&&"query"in r)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const a in r)if(ps.includes(a))return Promise.reject(new Error(`[@octokit/graphql] "${a}" cannot be used as variable name`))}const s=typeof t=="string"?Object.assign({query:t},r):t,n=Object.keys(s).reduce((a,u)=>us.includes(u)?(a[u]=s[u],a):(a.variables||(a.variables={}),a.variables[u]=s[u],a),{}),i=s.baseUrl||e.endpoint.DEFAULTS.baseUrl;return rt.test(i)&&(n.url=i.replace(rt,"/api/graphql")),e(n).then(a=>{if(a.data.errors){const u={};for(const g of Object.keys(a.headers))u[g]=a.headers[g];throw new cs(n,u,a.data)}return a.data.data})}function be(e,t){const r=e.defaults(t);return Object.assign((n,i)=>ds(r,n,i),{defaults:be.bind(null,r),endpoint:r.endpoint})}be(he,{headers:{"user-agent":`octokit-graphql.js/${as} ${ee()}`},method:"POST",url:"/graphql"});function gs(e){return be(e,{method:"POST",url:"/graphql"})}var ms=/^v1\./,hs=/^ghs_/,fs=/^ghu_/;async function Es(e){const t=e.split(/\./).length===3,r=ms.test(e)||hs.test(e),s=fs.test(e);return{type:"token",token:e,tokenType:t?"app":r?"installation":s?"user-to-server":"oauth"}}function Ts(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function _s(e,t,r,s){const n=t.endpoint.merge(r,s);return n.headers.authorization=Ts(e),t(n)}var ys=function(t){if(!t)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof t!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return t=t.replace(/^(token|bearer) +/i,""),Object.assign(Es.bind(null,t),{hook:_s.bind(null,t)})};const Et="6.1.2",st=()=>{},ws=console.warn.bind(console),bs=console.error.bind(console),ot=`octokit-core.js/${Et} ${ee()}`;var Y;let vs=(Y=class{constructor(t={}){v(this,"request");v(this,"graphql");v(this,"log");v(this,"hook");v(this,"auth");const r=new Kr.Collection,s={baseUrl:he.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},t.request,{hook:r.bind(null,"request")}),mediaType:{previews:[],format:""}};if(s.headers["user-agent"]=t.userAgent?`${t.userAgent} ${ot}`:ot,t.baseUrl&&(s.baseUrl=t.baseUrl),t.previews&&(s.mediaType.previews=t.previews),t.timeZone&&(s.headers["time-zone"]=t.timeZone),this.request=he.defaults(s),this.graphql=gs(this.request).defaults(s),this.log=Object.assign({debug:st,info:st,warn:ws,error:bs},t.log),this.hook=r,t.authStrategy){const{authStrategy:i,...a}=t,u=i(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:a},t.auth));r.wrap("request",u.hook),this.auth=u}else if(!t.auth)this.auth=async()=>({type:"unauthenticated"});else{const i=ys(t.auth);r.wrap("request",i.hook),this.auth=i}const n=this.constructor;for(let i=0;i<n.plugins.length;++i)Object.assign(this,n.plugins[i](this,t))}static defaults(t){return class extends this{constructor(...s){const n=s[0]||{};if(typeof t=="function"){super(t(n));return}super(Object.assign({},t,n,n.userAgent&&t.userAgent?{userAgent:`${n.userAgent} ${t.userAgent}`}:null))}}}static plugin(...t){var n;const r=this.plugins;return n=class extends this{},v(n,"plugins",r.concat(t.filter(i=>!r.includes(i)))),n}},v(Y,"VERSION",Et),v(Y,"plugins",[]),Y);var ks="0.0.0-development";function Ps(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;const r=e.data.incomplete_results,s=e.data.repository_selection,n=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const i=Object.keys(e.data)[0],a=e.data[i];return e.data=a,typeof r<"u"&&(e.data.incomplete_results=r),typeof s<"u"&&(e.data.repository_selection=s),e.data.total_count=n,e}function ve(e,t,r){const s=typeof t=="function"?t.endpoint(r):e.request.endpoint(t,r),n=typeof t=="function"?t:e.request,i=s.method,a=s.headers;let u=s.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!u)return{done:!0};try{const g=await n({method:i,url:u,headers:a}),h=Ps(g);return u=((h.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:h}}catch(g){if(g.status!==409)throw g;return u="",{value:{status:200,headers:{},data:[]}}}}})}}function Tt(e,t,r,s){return typeof r=="function"&&(s=r,r=void 0),_t(e,[],ve(e,t,r)[Symbol.asyncIterator](),s)}function _t(e,t,r,s){return r.next().then(n=>{if(n.done)return t;let i=!1;function a(){i=!0}return t=t.concat(s?s(n.value,a):n.value.data),i?t:_t(e,t,r,s)})}Object.assign(Tt,{iterator:ve});function yt(e){return{paginate:Object.assign(Tt.bind(null,e),{iterator:ve.bind(null,e)})}}yt.VERSION=ks;var Gs=(e,t)=>`The cursor at "${e.join(",")}" did not change its value "${t}" after a page transition. Please make sure your that your query is set up correctly.`,Ss=class extends Error{constructor(t,r){super(Gs(t.pathInQuery,r));v(this,"name","MissingCursorChangeError");this.pageInfo=t,this.cursorValue=r,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Os=class extends Error{constructor(t){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(t,null,2)}`);v(this,"name","MissingPageInfo");this.response=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Rs=e=>Object.prototype.toString.call(e)==="[object Object]";function wt(e){const t=bt(e,"pageInfo");if(t.length===0)throw new Os(e);return t}var bt=(e,t,r=[])=>{for(const s of Object.keys(e)){const n=[...r,s],i=e[s];if(Rs(i)){if(i.hasOwnProperty(t))return n;const a=bt(i,t,n);if(a.length>0)return a}}return[]},z=(e,t)=>t.reduce((r,s)=>r[s],e),ce=(e,t,r)=>{const s=t[t.length-1],n=[...t].slice(0,-1),i=z(e,n);typeof r=="function"?i[s]=r(i[s]):i[s]=r},As=e=>{const t=wt(e);return{pathInQuery:t,pageInfo:z(e,[...t,"pageInfo"])}},vt=e=>e.hasOwnProperty("hasNextPage"),Fs=e=>vt(e)?e.endCursor:e.startCursor,Ds=e=>vt(e)?e.hasNextPage:e.hasPreviousPage,kt=e=>(t,r={})=>{let s=!0,n={...r};return{[Symbol.asyncIterator]:()=>({async next(){if(!s)return{done:!0,value:{}};const i=await e.graphql(t,n),a=As(i),u=Fs(a.pageInfo);if(s=Ds(a.pageInfo),s&&u===n.cursor)throw new Ss(a,u);return n={...n,cursor:u},{done:!1,value:i}}})}},Us=(e,t)=>{if(Object.keys(e).length===0)return Object.assign(e,t);const r=wt(e),s=[...r,"nodes"],n=z(t,s);n&&ce(e,s,g=>[...g,...n]);const i=[...r,"edges"],a=z(t,i);a&&ce(e,i,g=>[...g,...a]);const u=[...r,"pageInfo"];return ce(e,u,z(t,u)),e},Cs=e=>{const t=kt(e);return async(r,s={})=>{let n={};for await(const i of t(r,s))n=Us(n,i);return n}};function Ls(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(Cs(e),{iterator:kt(e)})})}}const $s="13.2.6",Is={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};var js=Is;const L=new Map;for(const[e,t]of Object.entries(js))for(const[r,s]of Object.entries(t)){const[n,i,a]=s,[u,g]=n.split(/ /),h=Object.assign({method:u,url:g},i);L.has(e)||L.set(e,new Map),L.get(e).set(r,{scope:e,methodName:r,endpointDefaults:h,decorations:a})}const qs={has({scope:e},t){return L.get(e).has(t)},getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,t,r){return Object.defineProperty(e.cache,t,r),!0},deleteProperty(e,t){return delete e.cache[t],!0},ownKeys({scope:e}){return[...L.get(e).keys()]},set(e,t,r){return e.cache[t]=r},get({octokit:e,scope:t,cache:r},s){if(r[s])return r[s];const n=L.get(t).get(s);if(!n)return;const{endpointDefaults:i,decorations:a}=n;return a?r[s]=Bs(e,t,s,i,a):r[s]=e.request.defaults(i),r[s]}};function xs(e){const t={};for(const r of L.keys())t[r]=new Proxy({octokit:e,scope:r,cache:{}},qs);return t}function Bs(e,t,r,s,n){const i=e.request.defaults(s);function a(...u){let g=i.endpoint.merge(...u);if(n.mapToData)return g=Object.assign({},g,{data:g[n.mapToData],[n.mapToData]:void 0}),i(g);if(n.renamed){const[h,_]=n.renamed;e.log.warn(`octokit.${t}.${r}() has been renamed to octokit.${h}.${_}()`)}if(n.deprecated&&e.log.warn(n.deprecated),n.renamedParameters){const h=i.endpoint.merge(...u);for(const[_,T]of Object.entries(n.renamedParameters))_ in h&&(e.log.warn(`"${_}" parameter is deprecated for "octokit.${t}.${r}()". Use "${T}" instead`),T in h||(h[T]=h[_]),delete h[_]);return i(h)}return i(...u)}return Object.assign(a,i)}function Pt(e){return{rest:xs(e)}}Pt.VERSION=$s;var ue=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Ks(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Gt={exports:{}};(function(e,t){(function(r,s){e.exports=s()})(ue,function(){var r=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof ue<"u"?ue:typeof self<"u"?self:{};function s(E){return E&&E.default||E}var n=function(E,l,o={}){var c,p,d;for(c in l)d=l[c],o[c]=(p=E[c])!=null?p:d;return o},i=function(E,l,o={}){var c,p;for(c in E)p=E[c],l[c]!==void 0&&(o[c]=p);return o},a={load:n,overwrite:i},u;u=class{constructor(l,o){this.incr=l,this.decr=o,this._first=null,this._last=null,this.length=0}push(l){var o;this.length++,typeof this.incr=="function"&&this.incr(),o={value:l,prev:this._last,next:null},this._last!=null?(this._last.next=o,this._last=o):this._first=this._last=o}shift(){var l;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),l=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,l}first(){if(this._first!=null)return this._first.value}getArray(){var l,o,c;for(l=this._first,c=[];l!=null;)c.push((o=l,l=l.next,o.value));return c}forEachShift(l){var o;for(o=this.shift();o!=null;)l(o),o=this.shift()}debug(){var l,o,c,p,d;for(l=this._first,d=[];l!=null;)d.push((o=l,l=l.next,{value:o.value,prev:(c=o.prev)!=null?c.value:void 0,next:(p=o.next)!=null?p.value:void 0}));return d}};var g=u,h;h=class{constructor(l){if(this.instance=l,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(o,c)=>this._addListener(o,"many",c),this.instance.once=(o,c)=>this._addListener(o,"once",c),this.instance.removeAllListeners=(o=null)=>o!=null?delete this._events[o]:this._events={}}_addListener(l,o,c){var p;return(p=this._events)[l]==null&&(p[l]=[]),this._events[l].push({cb:c,status:o}),this.instance}listenerCount(l){return this._events[l]!=null?this._events[l].length:0}async trigger(l,...o){var c,p;try{return l!=="debug"&&this.trigger("debug",`Event triggered: ${l}`,o),this._events[l]==null?void 0:(this._events[l]=this._events[l].filter(function(d){return d.status!=="none"}),p=this._events[l].map(async d=>{var m,f;if(d.status!=="none"){d.status==="once"&&(d.status="none");try{return f=typeof d.cb=="function"?d.cb(...o):void 0,typeof(f!=null?f.then:void 0)=="function"?await f:f}catch(w){return m=w,this.trigger("error",m),null}}}),(await Promise.all(p)).find(function(d){return d!=null}))}catch(d){return c=d,this.trigger("error",c),null}}};var _=h,T,y,S;T=g,y=_,S=class{constructor(l){this.Events=new y(this),this._length=0,this._lists=(function(){var o,c,p;for(p=[],o=1,c=l;1<=c?o<=c:o>=c;1<=c?++o:--o)p.push(new T(()=>this.incr(),()=>this.decr()));return p}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(l){return this._lists[l.options.priority].push(l)}queued(l){return l!=null?this._lists[l].length:this._length}shiftAll(l){return this._lists.forEach(function(o){return o.forEachShift(l)})}getFirst(l=this._lists){var o,c,p;for(o=0,c=l.length;o<c;o++)if(p=l[o],p.length>0)return p;return[]}shiftLastFrom(l){return this.getFirst(this._lists.slice(l).reverse()).shift()}};var O=S,A;A=class extends Error{};var b=A,k,F,Q,H,M;H=10,F=5,M=a,k=b,Q=class{constructor(l,o,c,p,d,m,f,w){this.task=l,this.args=o,this.rejectOnDrop=d,this.Events=m,this._states=f,this.Promise=w,this.options=M.load(c,p),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===p.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((P,R)=>{this._resolve=P,this._reject=R}),this.retryCount=0}_sanitizePriority(l){var o;return o=~~l!==l?F:l,o<0?0:o>H-1?H-1:o}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:l,message:o="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(l??new k(o)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(l){var o;if(o=this._states.jobStatus(this.options.id),!(o===l||l==="DONE"&&o===null))throw new k(`Invalid job status ${o}, expected ${l}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(l,o){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:l,blocked:o})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(l,o,c,p){var d,m,f;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),m={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",m);try{if(f=await(l!=null?l.schedule(this.options,this.task,...this.args):this.task(...this.args)),o())return this.doDone(m),await p(this.options,m),this._assertStatus("DONE"),this._resolve(f)}catch(w){return d=w,this._onFailure(d,m,o,c,p)}}doExpire(l,o,c){var p,d;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),d={args:this.args,options:this.options,retryCount:this.retryCount},p=new k(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(p,d,l,o,c)}async _onFailure(l,o,c,p,d){var m,f;if(c())return m=await this.Events.trigger("failed",l,o),m!=null?(f=~~m,this.Events.trigger("retry",`Retrying ${this.options.id} after ${f} ms`,o),this.retryCount++,p(f)):(this.doDone(o),await d(this.options,o),this._assertStatus("DONE"),this._reject(l))}doDone(l){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",l)}};var U=Q,$,te,re;re=a,$=b,te=class{constructor(l,o,c){this.instance=l,this.storeOptions=o,this.clientId=this.instance._randomIndex(),re.load(c,c,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var l;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(l=this.heartbeat=setInterval(()=>{var o,c,p,d,m;if(d=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&d>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=d,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&d>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:o,reservoirIncreaseMaximum:p,reservoir:m}=this.storeOptions,this._lastReservoirIncrease=d,c=p!=null?Math.min(o,p-m):o,c>0))return this.storeOptions.reservoir+=c,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?l.unref():void 0:clearInterval(this.heartbeat)}async __publish__(l){return await this.yieldLoop(),this.instance.Events.trigger("message",l.toString())}async __disconnect__(l){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(l=0){return new this.Promise(function(o,c){return setTimeout(o,l)})}computePenalty(){var l;return(l=this.storeOptions.penalty)!=null?l:15*this.storeOptions.minTime||5e3}async __updateSettings__(l){return await this.yieldLoop(),re.overwrite(l,l,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(l){return await this.yieldLoop(),this._nextRequest+this.timeout<l}computeCapacity(){var l,o;return{maxConcurrent:l,reservoir:o}=this.storeOptions,l!=null&&o!=null?Math.min(l-this._running,o):l!=null?l-this._running:o??null}conditionsCheck(l){var o;return o=this.computeCapacity(),o==null||l<=o}async __incrementReservoir__(l){var o;return await this.yieldLoop(),o=this.storeOptions.reservoir+=l,this.instance._drainAll(this.computeCapacity()),o}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(l){return this._unblockTime>=l}check(l,o){return this.conditionsCheck(l)&&this._nextRequest-o<=0}async __check__(l){var o;return await this.yieldLoop(),o=Date.now(),this.check(l,o)}async __register__(l,o,c){var p,d;return await this.yieldLoop(),p=Date.now(),this.conditionsCheck(o)?(this._running+=o,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=o),d=Math.max(this._nextRequest-p,0),this._nextRequest=p+d+this.storeOptions.minTime,{success:!0,wait:d,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(l,o){var c,p,d;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&o>this.storeOptions.maxConcurrent)throw new $(`Impossible to add a job having a weight of ${o} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return p=Date.now(),d=this.storeOptions.highWater!=null&&l===this.storeOptions.highWater&&!this.check(o,p),c=this.strategyIsBlock()&&(d||this.isBlocked(p)),c&&(this._unblockTime=p+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:d,blocked:c,strategy:this.storeOptions.strategy}}async __free__(l,o){return await this.yieldLoop(),this._running-=o,this._done+=o,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var Lt=te,Pe,Ge;Pe=b,Ge=class{constructor(l){this.status=l,this._jobs={},this.counts=this.status.map(function(){return 0})}next(l){var o,c;if(o=this._jobs[l],c=o+1,o!=null&&c<this.status.length)return this.counts[o]--,this.counts[c]++,this._jobs[l]++;if(o!=null)return this.counts[o]--,delete this._jobs[l]}start(l){var o;return o=0,this._jobs[l]=o,this.counts[o]++}remove(l){var o;return o=this._jobs[l],o!=null&&(this.counts[o]--,delete this._jobs[l]),o!=null}jobStatus(l){var o;return(o=this.status[this._jobs[l]])!=null?o:null}statusJobs(l){var o,c,p,d,m;if(l!=null){if(c=this.status.indexOf(l),c<0)throw new Pe(`status must be one of ${this.status.join(", ")}`);p=this._jobs,d=[];for(o in p)m=p[o],m===c&&d.push(o);return d}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((l,o,c)=>(l[this.status[c]]=o,l),{})}};var $t=Ge,Se,Oe;Se=g,Oe=class{constructor(l,o){this.schedule=this.schedule.bind(this),this.name=l,this.Promise=o,this._running=0,this._queue=new Se}isEmpty(){return this._queue.length===0}async _tryToRun(){var l,o,c,p,d,m,f;if(this._running<1&&this._queue.length>0)return this._running++,{task:f,args:l,resolve:d,reject:p}=this._queue.shift(),o=await async function(){try{return m=await f(...l),function(){return d(m)}}catch(w){return c=w,function(){return p(c)}}}(),this._running--,this._tryToRun(),o()}schedule(l,...o){var c,p,d;return d=p=null,c=new this.Promise(function(m,f){return d=m,p=f}),this._queue.push({task:l,args:o,resolve:d,reject:p}),this._tryToRun(),c}};var It=Oe,Re="2.19.5",jt={version:Re},qt=Object.freeze({version:Re,default:jt}),Ae=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Fe=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),xt=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),De,Ue,Ce,Le,$e,X;X=a,De=_,Le=Ae,Ce=Fe,$e=xt,Ue=(function(){class E{constructor(o={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=o,X.load(this.limiterOptions,this.defaults,this),this.Events=new De(this),this.instances={},this.Bottleneck=Ve,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new Le(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new Ce(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(o=""){var c;return(c=this.instances[o])!=null?c:(()=>{var p;return p=this.instances[o]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${o}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",p,o),p})()}async deleteKey(o=""){var c,p;return p=this.instances[o],this.connection&&(c=await this.connection.__runCommand__(["del",...$e.allKeys(`${this.id}-${o}`)])),p!=null&&(delete this.instances[o],await p.disconnect()),p!=null||c>0}limiters(){var o,c,p,d;c=this.instances,p=[];for(o in c)d=c[o],p.push({key:o,limiter:d});return p}keys(){return Object.keys(this.instances)}async clusterKeys(){var o,c,p,d,m,f,w,P,R;if(this.connection==null)return this.Promise.resolve(this.keys());for(f=[],o=null,R=`b_${this.id}-`.length,c=9;o!==0;)for([P,p]=await this.connection.__runCommand__(["scan",o??0,"match",`b_${this.id}-*_settings`,"count",1e4]),o=~~P,d=0,w=p.length;d<w;d++)m=p[d],f.push(m.slice(R,-c));return f}_startAutoCleanup(){var o;return clearInterval(this.interval),typeof(o=this.interval=setInterval(async()=>{var c,p,d,m,f,w;f=Date.now(),d=this.instances,m=[];for(p in d){w=d[p];try{await w._store.__groupCheck__(f)?m.push(this.deleteKey(p)):m.push(void 0)}catch(P){c=P,m.push(w.Events.trigger("error",c))}}return m},this.timeout/2)).unref=="function"?o.unref():void 0}updateSettings(o={}){if(X.overwrite(o,this.defaults,this),X.overwrite(o,o,this.limiterOptions),o.timeout!=null)return this._startAutoCleanup()}disconnect(o=!0){var c;if(!this.sharedConnection)return(c=this.connection)!=null?c.disconnect(o):void 0}}return E.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},E}).call(r);var Bt=Ue,Ie,je,qe;qe=a,je=_,Ie=(function(){class E{constructor(o={}){this.options=o,qe.load(this.options,this.defaults,this),this.Events=new je(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((o,c)=>this._resolve=o)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(o){var c;return this._arr.push(o),c=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),c}}return E.prototype.defaults={maxTime:null,maxSize:null,Promise},E}).call(r);var Kt=Ie,Ht=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Mt=s(qt),xe,Be,se,oe,Ke,ne,He,Me,We,ie,D,Ne=[].splice;ne=10,Be=5,D=a,He=O,oe=U,Ke=Lt,Me=Ht,se=_,We=$t,ie=It,xe=(function(){class E{constructor(o={},...c){var p,d;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(o,c),D.load(o,this.instanceDefaults,this),this._queues=new He(ne),this._scheduled={},this._states=new We(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new se(this),this._submitLock=new ie("submit",this.Promise),this._registerLock=new ie("register",this.Promise),d=D.load(o,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return p=D.load(o,this.redisStoreDefaults,{}),new Me(this,d,p);if(this.datastore==="local")return p=D.load(o,this.localStoreDefaults,{}),new Ke(this,d,p);throw new E.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}).call(this),this._queues.on("leftzero",()=>{var m;return(m=this._store.heartbeat)!=null&&typeof m.ref=="function"?m.ref():void 0}),this._queues.on("zero",()=>{var m;return(m=this._store.heartbeat)!=null&&typeof m.unref=="function"?m.unref():void 0})}_validateOptions(o,c){if(!(o!=null&&typeof o=="object"&&c.length===0))throw new E.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(o){return this._store.__publish__(o)}disconnect(o=!0){return this._store.__disconnect__(o)}chain(o){return this._limiter=o,this}queued(o){return this._queues.queued(o)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(o){return this._states.jobStatus(o)}jobs(o){return this._states.statusJobs(o)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(o=1){return this._store.__check__(o)}_clearGlobalState(o){return this._scheduled[o]!=null?(clearTimeout(this._scheduled[o].expiration),delete this._scheduled[o],!0):!1}async _free(o,c,p,d){var m,f;try{if({running:f}=await this._store.__free__(o,p.weight),this.Events.trigger("debug",`Freed ${p.id}`,d),f===0&&this.empty())return this.Events.trigger("idle")}catch(w){return m=w,this.Events.trigger("error",m)}}_run(o,c,p){var d,m,f;return c.doRun(),d=this._clearGlobalState.bind(this,o),f=this._run.bind(this,o,c),m=this._free.bind(this,o,c),this._scheduled[o]={timeout:setTimeout(()=>c.doExecute(this._limiter,d,f,m),p),expiration:c.options.expiration!=null?setTimeout(function(){return c.doExpire(d,f,m)},p+c.options.expiration):void 0,job:c}}_drainOne(o){return this._registerLock.schedule(()=>{var c,p,d,m,f;return this.queued()===0?this.Promise.resolve(null):(f=this._queues.getFirst(),{options:m,args:c}=d=f.first(),o!=null&&m.weight>o?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${m.id}`,{args:c,options:m}),p=this._randomIndex(),this._store.__register__(p,m.weight,m.expiration).then(({success:w,wait:P,reservoir:R})=>{var W;return this.Events.trigger("debug",`Drained ${m.id}`,{success:w,args:c,options:m}),w?(f.shift(),W=this.empty(),W&&this.Events.trigger("empty"),R===0&&this.Events.trigger("depleted",W),this._run(p,d,P),this.Promise.resolve(m.weight)):this.Promise.resolve(null)})))})}_drainAll(o,c=0){return this._drainOne(o).then(p=>{var d;return p!=null?(d=o!=null?o-p:o,this._drainAll(d,c+p)):this.Promise.resolve(c)}).catch(p=>this.Events.trigger("error",p))}_dropAllQueued(o){return this._queues.shiftAll(function(c){return c.doDrop({message:o})})}stop(o={}){var c,p;return o=D.load(o,this.stopDefaults),p=d=>{var m;return m=()=>{var f;return f=this._states.counts,f[0]+f[1]+f[2]+f[3]===d},new this.Promise((f,w)=>m()?f():this.on("done",()=>{if(m())return this.removeAllListeners("done"),f()}))},c=o.dropWaitingJobs?(this._run=function(d,m){return m.doDrop({message:o.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var d,m,f;m=this._scheduled;for(d in m)f=m[d],this.jobStatus(f.job.options.id)==="RUNNING"&&(clearTimeout(f.timeout),clearTimeout(f.expiration),f.job.doDrop({message:o.dropErrorMessage}));return this._dropAllQueued(o.dropErrorMessage),p(0)}))):this.schedule({priority:ne-1,weight:0},()=>p(1)),this._receive=function(d){return d._reject(new E.prototype.BottleneckError(o.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new E.prototype.BottleneckError("stop() has already been called")),c}async _addToQueue(o){var c,p,d,m,f,w,P;({args:c,options:m}=o);try{({reachedHWM:f,blocked:p,strategy:P}=await this._store.__submit__(this.queued(),m.weight))}catch(R){return d=R,this.Events.trigger("debug",`Could not queue ${m.id}`,{args:c,options:m,error:d}),o.doDrop({error:d}),!1}return p?(o.doDrop(),!0):f&&(w=P===E.prototype.strategy.LEAK?this._queues.shiftLastFrom(m.priority):P===E.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(m.priority+1):P===E.prototype.strategy.OVERFLOW?o:void 0,w!=null&&w.doDrop(),w==null||P===E.prototype.strategy.OVERFLOW)?(w==null&&o.doDrop(),f):(o.doQueue(f,p),this._queues.push(o),await this._drainAll(),f)}_receive(o){return this._states.jobStatus(o.options.id)!=null?(o._reject(new E.prototype.BottleneckError(`A job with the same id already exists (id=${o.options.id})`)),!1):(o.doReceive(),this._submitLock.schedule(this._addToQueue,o))}submit(...o){var c,p,d,m,f,w,P;return typeof o[0]=="function"?(f=o,[p,...o]=f,[c]=Ne.call(o,-1),m=D.load({},this.jobDefaults)):(w=o,[m,p,...o]=w,[c]=Ne.call(o,-1),m=D.load(m,this.jobDefaults)),P=(...R)=>new this.Promise(function(W,Nt){return p(...R,function(...ze){return(ze[0]!=null?Nt:W)(ze)})}),d=new oe(P,o,m,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),d.promise.then(function(R){return typeof c=="function"?c(...R):void 0}).catch(function(R){return Array.isArray(R)?typeof c=="function"?c(...R):void 0:typeof c=="function"?c(R):void 0}),this._receive(d)}schedule(...o){var c,p,d;return typeof o[0]=="function"?([d,...o]=o,p={}):[p,d,...o]=o,c=new oe(d,o,p,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(c),c.promise}wrap(o){var c,p;return c=this.schedule.bind(this),p=function(...d){return c(o.bind(this),...d)},p.withOptions=function(d,...m){return c(d,o,...m)},p}async updateSettings(o={}){return await this._store.__updateSettings__(D.overwrite(o,this.storeDefaults)),D.overwrite(o,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(o=0){return this._store.__incrementReservoir__(o)}}return E.default=E,E.Events=se,E.version=E.prototype.version=Mt.version,E.strategy=E.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},E.BottleneckError=E.prototype.BottleneckError=b,E.Group=E.prototype.Group=Bt,E.RedisConnection=E.prototype.RedisConnection=Ae,E.IORedisConnection=E.prototype.IORedisConnection=Fe,E.Batcher=E.prototype.Batcher=Kt,E.prototype.jobDefaults={priority:Be,weight:1,expiration:null,id:"<no-id>"},E.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:E.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},E.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},E.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},E.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},E.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},E}).call(r);var Ve=xe,Wt=Ve;return Wt})})(Gt);var Hs=Gt.exports;const St=Ks(Hs);var Ms="0.0.0-development";async function Ot(e,t,r,s){if(!r.request||!r.request.request)throw r;if(r.status>=400&&!e.doNotRetry.includes(r.status)){const n=s.request.retries!=null?s.request.retries:e.retries,i=Math.pow((s.request.retryCount||0)+1,2);throw t.retry.retryRequest(r,n,i)}throw r}async function Ws(e,t,r,s){const n=new St;return n.on("failed",function(i,a){const u=~~i.request.request.retries,g=~~i.request.request.retryAfter;if(s.request.retryCount=a.retryCount+1,u>a.retryCount)return g*e.retryAfterBaseValue}),n.schedule(Ns.bind(null,e,t,r),s)}async function Ns(e,t,r,s){const n=await r(r,s);if(n.data&&n.data.errors&&n.data.errors.length>0&&/Something went wrong while executing your query/.test(n.data.errors[0].message)){const i=new V(n.data.errors[0].message,500,{request:s,response:n});return Ot(e,t,i,s)}return n}function Rt(e,t){const r=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},t.retry);return r.enabled&&(e.hook.error("request",Ot.bind(null,r,e)),e.hook.wrap("request",Ws.bind(null,r,e))),{retry:{retryRequest:(s,n,i)=>(s.request.request=Object.assign({},s.request.request,{retries:n,retryAfter:i}),s)}}}Rt.VERSION=Ms;var Vs="0.0.0-development",pe=()=>Promise.resolve();function zs(e,t,r){return e.retryLimiter.schedule(Js,e,t,r)}async function Js(e,t,r){const s=r.method!=="GET"&&r.method!=="HEAD",{pathname:n}=new URL(r.url,"http://github.test"),i=r.method==="GET"&&n.startsWith("/search/"),a=n.startsWith("/graphql"),g=~~t.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(g.expiration=1e3*60),(s||a)&&await e.write.key(e.id).schedule(g,pe),s&&e.triggersNotification(n)&&await e.notifications.key(e.id).schedule(g,pe),i&&await e.search.key(e.id).schedule(g,pe);const h=e.global.key(e.id).schedule(g,t,r);if(a){const _=await h;if(_.data.errors!=null&&_.data.errors.some(T=>T.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:_,data:_.data})}return h}var Qs=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function Xs(e){const r=`^(?:${e.map(s=>s.split("/").map(n=>n.startsWith("{")?"(?:.+?)":n).join("/")).map(s=>`(?:${s})`).join("|")})[^/]*$`;return new RegExp(r,"i")}var nt=Xs(Qs),At=nt.test.bind(nt),q={},Ys=function(e,t){q.global=new e.Group({id:"octokit-global",maxConcurrent:10,...t}),q.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...t}),q.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...t}),q.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...t})};function ke(e,t){const{enabled:r=!0,Bottleneck:s=St,id:n="no-id",timeout:i=1e3*60*2,connection:a}=t.throttle||{};if(!r)return{};const u={timeout:i};typeof a<"u"&&(u.connection=a),q.global==null&&Ys(s,u);const g=Object.assign({clustering:a!=null,triggersNotification:At,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new s,id:n,...q},t.throttle);if(typeof g.onSecondaryRateLimit!="function"||typeof g.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);const h={},_=new s.Events(h);return h.on("secondary-limit",g.onSecondaryRateLimit),h.on("rate-limit",g.onRateLimit),h.on("error",T=>e.log.warn("Error in throttling-plugin limit handler",T)),g.retryLimiter.on("failed",async function(T,y){const[S,O,A]=y.args,{pathname:b}=new URL(A.url,"http://github.test");if(!(b.startsWith("/graphql")&&T.status!==401||T.status===403||T.status===429))return;const F=~~O.retryCount;O.retryCount=F,A.request.retryCount=F;const{wantRetry:Q,retryAfter:H=0}=await async function(){var M;if(/\bsecondary rate\b/i.test(T.message)){const U=Number(T.response.headers["retry-after"])||S.fallbackSecondaryRateRetryAfter;return{wantRetry:await _.trigger("secondary-limit",U,A,e,F),retryAfter:U}}if(T.response.headers!=null&&T.response.headers["x-ratelimit-remaining"]==="0"||(((M=T.response.data)==null?void 0:M.errors)??[]).some(U=>U.type==="RATE_LIMITED")){const U=new Date(~~T.response.headers["x-ratelimit-reset"]*1e3).getTime(),$=Math.max(Math.ceil((U-Date.now())/1e3)+1,0);return{wantRetry:await _.trigger("rate-limit",$,A,e,F),retryAfter:$}}return{}}();if(Q)return O.retryCount++,H*S.retryAfterBaseValue}),e.hook.wrap("request",zs.bind(null,g)),{}}ke.VERSION=Vs;ke.triggersNotification=At;var Zs="0.0.0-development",Ft=vs.plugin(Pt,yt,Ls,Rt,ke).defaults({userAgent:`octokit.js/${Zs}`,throttle:{onRateLimit:eo,onSecondaryRateLimit:to}});function eo(e,t,r){if(r.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`),t.request.retryCount===0)return r.log.info(`Retrying after ${e} seconds!`),!0}function to(e,t,r){if(r.log.warn(`SecondaryRateLimit detected for request ${t.method} ${t.url}`),t.request.retryCount===0)return r.log.info(`Retrying after ${e} seconds!`),!0}async function ro(e,t){const r=await oo(t),s=K(e),n=[];for(const i of Object.values(r.data.files||{})){if(!(i!=null&&i.content))continue;const a=s.validate(i.content);if(a===null)throw console.error(`Invalid data for "${s.title()}":`,i.content),new Error(`ungültige Daten für "${s.title()}"!`);n.push(a)}return{gist:{id:t,revision:await Dt(t)},lists:n}}async function Dt(e){const t=new Ft;t.log.warn=s=>{alert(`Get gist revision failed: ${e}: ${s}`)};const r=await t.request("GET /gists/{gist_id}/commits",{gist_id:e,headers:{"X-GitHub-Api-Version":"2022-11-28"}});if(r.status!==200)throw new Error(`GET ${r.url} ${r.status}`);return r.data.length}function so(e,t){return e===null?!1:e!==t||e===1}async function oo(e){const t=new Ft;t.log.warn=s=>{alert(`Get gist data failed: ${e}: ${s}`)},console.debug("fetch gist...");const r=await t.request("GET /gists/{gist_id}",{gist_id:e,headers:{"X-GitHub-Api-Version":"2022-11-28"}});if(r.status!==200)throw new Error(`anfrage von "GET /gist/${e}" ist mit Statuscode ${r.status} fehlgeschlagen`);return r}const no=String.raw;function io(e){var u,g;const t=document.createElement("li");t.className="gist-item ui-flex-grid-item ui-border",t.style.width="100%",t.innerHTML=no`
        <div class="ui-flex-grid-row" style="--justify: space-between; --align: center;">
            <h3>${e.title}</h3>
            <div
                class="ui-flex-grid"
                style="--align: flex-end; --gap: 0; --mono: 1; font-size: 0.85rem; width: fit-content;"
            >
                <span>
                    <span>Local Rev.: </span>
                    <span
                        id="gistID_LocalRevision_${e.storeKey}"
                        style="--wght: 450; color: green"
                    >
                        ${((u=G.get(e.storeKey).gist)==null?void 0:u.revision)||"?"}
                    </span>
                </span>
                <span>
                    <span>Remote Rev.: </span>
                    <span id="gistID_RemoteRevision_${e.storeKey}">?</span>
                </span>
            </div>
        </div>

        <div
            class="gist-id-container ui-flex-grid-row"
            style="--align: flex-end; --justify: space-between; width: 100%;"
        >
            <div class="ui-flex-grid-item">
                <label for="gistID_${e.storeKey}">Gist ID</label>
                <input
                    id="gistID_${e.storeKey}"
                    style="width: 100%"
                    type="text"
                    placeholder="Gist ID von Telegram hier einfügen"
                    value="${((g=G.get(e.storeKey).gist)==null?void 0:g.id)||""}"
                />
            </div>
            <div class="ui-flex-grid-item" style="--flex: 0;">
                <button class="update" variant="ghost" color="primary" icon>
                    <i class="bi bi-cloud-download"></i>
                </button>
            </div>
        </div>
    `;const r=t.querySelector(`#gistID_LocalRevision_${e.storeKey}`),s=t.querySelector(`#gistID_RemoteRevision_${e.storeKey}`),n=t.querySelector(`#gistID_${e.storeKey}`),i=t.querySelector("button.update");n.onchange=async()=>i.click();let a=!1;return i.onclick=async()=>{var T;if(a)return;a=!0,i.classList.add("active");const h=()=>{setTimeout(()=>{a=!1,i.classList.remove("active")})},_=n.value;if(!_)return G.update(e.storeKey,y=>(y.gist=null,y)),h();G.update(e.storeKey,y=>(y.gist={id:_,revision:null},y));try{const y=await ro(e.storeKey,_);G.set(e.storeKey,y),s.innerText=r.innerText=`${((T=y.gist)==null?void 0:T.revision)||"?"}`,r.style.color="green",n.ariaInvalid=null}catch(y){console.warn(`Pull from gist failed for "${e.storeKey}" ("${_}"): ${y}`),n.ariaInvalid=""}return h()},n.value&&setTimeout(async()=>{var h,_;try{let T=((h=G.get("runtime").lists[n.value])==null?void 0:h.remoteRevision)||null;T||(T=await Dt(n.value),G.update("runtime",y=>(y.lists[n.value]={remoteRevision:T},y))),s.innerText=`${T||"?"}`,n.ariaInvalid=null,so(T,((_=G.get(e.storeKey).gist)==null?void 0:_.revision)||null)?r.style.color="red":r.style.color="green"}catch(T){n.ariaInvalid="",console.debug(`Update failed for "${e.storeKey}" ("${n.value}"): ${T}`)}}),{element:t,destroy(){}}}let fe=[],Ut="";async function ao(){const e=C();Ut=e.innerText,e.innerText="Gist IDs",co()}async function lo(){C().innerText=Ut,fe.forEach(e=>e()),fe=[]}function co(){const e=[{title:"Alarm Listen",storeKey:"alert-lists"},{title:"Blech Listen",storeKey:"metal-sheets"},{title:"VIS",storeKey:"vis"},{title:"VIS: Data",storeKey:"vis-data"},{title:"Spezial",storeKey:"special"}],t=document.querySelector(".gist-ids");for(const r of e){const s=io(r);fe.push(s.destroy),t.appendChild(s.element)}}function uo(e){return new Promise((t,r)=>{const s=at();let n=!1;s.close.onclick=()=>{n=!0,s.root.close()},s.root.onclose=()=>{if(n){t(null);return}const a=s.format.value,u=s.toolID.value,g=parseInt(s.press.children[s.press.selectedIndex].value,10),h=[],_=[];s.filters.forEach(T=>{if(h.push(T.value),T.checked)return;const y=parseInt(T.getAttribute("data-index"),10);_.push(y)}),t({format:a,toolID:u,data:{press:g,table:{filter:_,header:h,data:(e==null?void 0:e.data.table.data)||[]}}})};const i=()=>{e&&(s.format.value=e.format,s.toolID.value=e.toolID,s.press.selectedIndex=e.data.press+1,s.filters.forEach(a=>{var g;const u=parseInt(a.value,10);a.checked=!((g=e.data.table.filter)!=null&&g.includes(u))}))};i(),s.reset.onclick=a=>{e&&(a.preventDefault(),i())},s.root.showModal()})}let Ee=[],Ct="";async function po(){const e=x.hash.getSearchParam(),t=ir(e.listKey);if(!t)throw new Error(`alert list not found: listKey=${e.listKey}`);{const r=C();Ct=r.innerText,r.innerText=t.data.press>-1?`[P${t.data.press}] ${t.format} ${t.toolID}`:`${t.format} ${t.toolID}`}{const r=kr();r.onclick=async()=>{const s=at().format,n=await uo(t);if(!n){s.ariaInvalid=null;return}if(n.format)s.ariaInvalid=null;else{r.click(),s.ariaInvalid="";return}K("metal-sheets").replaceInStore(n,t)},r.style.display="inline-flex",Ee.push(()=>r.onclick=null)}mo(t.data.table.header,ho(t.data.table.data),e.listKey)}async function go(){Ee.forEach(e=>e()),Ee=[],C().innerText=Ct}function mo(e,t,r){const s=J().querySelector("table"),n=s.querySelector("thead"),i=s.querySelector("tbody"),a=document.createElement("tr");n.appendChild(a),e.forEach(u=>{const g=document.createElement("th");g.style.textWrap="pretty",g.innerText=u,a.appendChild(g)}),t.forEach(u=>{const g=document.createElement("tr");i.appendChild(g),u.forEach(h=>{const _=document.createElement("td");_.innerText=h,g.appendChild(_)})})}function ho(e){return e.sort((t,r)=>{const s=parseFloat(t[0]),n=parseFloat(r[0]);return s>n||s===n&&parseFloat(t[1])>parseFloat(r[1])?1:-1}),e}const fo=nr({async onNeedRefresh(){confirm("Update available")&&await fo()}});vr().onclick=()=>Sr();Gr().onclick=()=>ye();const Eo=Pr();Eo.onclick=()=>{x.hash.goTo(null,""),ye()};for(const e of["alert-lists","metal-sheets","vis","vis-bookmarks","vis-data","special"]){const t=_e(e);t.root.onclick=()=>setTimeout(()=>{G.update("drawerGroup",r=>(r[e]={...r[e]||{},open:t.root.open},r))})}{let e=[];G.listen("alert-lists",async t=>{e.forEach(s=>s()),e=[];const r=_e("alert-lists");r.items.innerHTML="";for(const s of t.lists){const n=_r({data:s});e.push(n.destroy),r.items.appendChild(n.element)}},!0)}{let e=[];G.listen("metal-sheets",async t=>{e.forEach(i=>i()),e=[];let r=[];const s=[];for(const i of t.lists)i.data.press>-1?r.push(i):s.push(i);r=r.sort((i,a)=>i.data.press>a.data.press?1:-1);const n=_e("metal-sheets");n.items.innerHTML="";for(const i of[...r,...s]){const a=br({data:i});e.push(a.destroy),n.items.appendChild(a.element)}},!0)}x.hash.init(J(),{"/":{title:"VIS | Gist IDs",template:{selector:'template[name="gist-ids"]',onMount(){ao()},onDestroy(){lo()}}},"alert-lists":{title:"VIS | Alarm Listen",template:{selector:'template[name="alert-lists"]',onMount(){Lr()},onDestroy(){$r()}}},alert:{title:"VIS | Alarm",template:{selector:'template[name="alert"]',onMount(){Fr()},onDestroy(){Dr()}}},"metal-sheets":{title:"VIS | Blech Listen",template:{selector:'template[name="metal-sheets"]',onMount(){po()},onDestroy(){go()}}},vis:{},"vis-bookmarks":{},"vis-data":{},special:{}});window.onhashchange=()=>{ye()};
